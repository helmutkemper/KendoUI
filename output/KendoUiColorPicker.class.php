<?php

  /**
   * A drop-down color picker widget.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker
   * 
   */
  class KendoUiColorPicker extends javascript
  {
    private $outputCStr;
    private $idElementCStr;
    private $nameVarCStr;
    private $htmlTagExtraCStr;
    
    function __construct ( $idElementAStr, $nameVarAStr = null, $htmlTagExtraAStr = null )
    {
      $this->idElementCStr = $idElementAStr;
      $this->nameVarCStr = $nameVarAStr;
      $this->htmlTagExtraCStr = $htmlTagExtraAStr;
    }
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ( $htmlIdAStr, $extraAStr )
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$htmlIdAStr}\" {$extraAStr}>";
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ()
    {
      if ( !is_null ( $this->nameVarCStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$this->nameVarCStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$this->idElementCStr}\").KendoUiColorPicker({";
      self::$mainJavaScriptCodeCStr .= $this->toObject( $this->dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      $this->dataCArr = null;
      return self::$mainJavaScriptCodeCStr;
    }
    
    /**
     * Specifies whether the widget should display the Apply / Cancel buttons.
     * Applicable only for the HSV selector, when a <a href="http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-palette"><b><u>pallete</u></b></a> is not specified.
     * @var $dataAX[ 'buttons' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-buttons
     * 
     * @code
       Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          buttons: false
        })
        </script>
     * @endcode
     * @throws string type error
     */
    public function buttons ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "buttons" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'buttons' ] ) )
      {
        parent::addData ( "buttons", $dataAX[ 'buttons' ] );
        unset ( $dataAX[ 'buttons' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'buttons' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::buttons ( \$data[ 'buttons' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * The number of columns to show in the color dropdown when a <a href="http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-palette"><b><u>pallete</u></b></a> is specified. This is automatically initialized for the "basic" and "websafe" palettes. If you use a custom palette then you can set this to some value that makes sense for your colors.
     * @var $dataAX[ 'columns' ]: ( Number )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-columns
     * 
     * @code
       Example - wrap list of colors on two rows with 3 columns
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          palette: [ "#000", "#333", "#666", "#999", "#ccc", "#fff" ],
          columns: 3
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function columns ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "columns" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'columns' ] ) )
      {
        parent::addData ( "columns", $dataAX[ 'columns' ] );
        unset ( $dataAX[ 'columns' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'columns' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::columns ( \$data[ 'columns' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * The size of a color cell.
     * @var $dataAX[ 'tileSize' ]: ( Number | Object ) ( default: 14 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-tileSize
     * 
     * @code
       Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          palette: "basic",
          tileSize: 32
        });
        </script>
     * @endcode
     * 
     * The width of the color cell.
     * @var $dataAX[ 'tileSize' ][ 'width' ]: ( Number ) ( default: 14 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-tileSize.width
     * 
     * @code
       Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          palette: "basic",
          tileSize: { width: 40 }
        });
        </script>
     * @endcode
     * @code
        Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          palette: "basic",
          tileSize: { height: 40 }
        });
        </script>
     * @endcode
     * 
     * The height of the color cell.
     * @var $dataAX[ 'tileSize' ][ 'height' ]: ( Number ) ( default: 14 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-tileSize.height
     * 
     * @code
       Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          palette: "basic",
          tileSize: { width: 40 }
        });
        </script>
     * @endcode
     * @code
        Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          palette: "basic",
          tileSize: { height: 40 }
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function tileSize ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "tileSize" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'tileSize' ][ 'width' ] ) )
      {
        parent::addData ( "tileSize.width", $dataAX[ 'tileSize' ][ 'width' ] );
        unset ( $dataAX[ 'tileSize' ][ 'width' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tileSize' ][ 'width' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::tileSize ( \$data[ 'tileSize' ][ 'width' ] type must be 'Number'" );
      }
      
      if ( is_numeric ( $dataAX[ 'tileSize' ][ 'height' ] ) )
      {
        parent::addData ( "tileSize.height", $dataAX[ 'tileSize' ][ 'height' ] );
        unset ( $dataAX[ 'tileSize' ][ 'height' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tileSize' ][ 'height' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::tileSize ( \$data[ 'tileSize' ][ 'height' ] type must be 'Number'" );
      }
      
      if ( is_numeric ( $dataAX[ 'tileSize' ] ) )
      {
        parent::addData ( "tileSize", $dataAX[ 'tileSize' ] );
        unset ( $dataAX[ 'tileSize' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_array ( $dataAX[ 'tileSize' ] ) )
      {
        parent::addData ( "tileSize", $dataAX[ 'tileSize' ] );
        unset ( $dataAX[ 'tileSize' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tileSize' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::tileSize ( \$data[ 'tileSize' ] type must be 'Number' | 'Object'" );
      }
      
    }
    
    
    /**
     * Allows localization of the strings that are used in the widget.
     * @var $dataAX[ 'messages' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-messages
     * 
     * @code
       Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          messages: {
            apply: "Update",
            cancel: "Discard"
          }
        })
        </script>
     * @endcode
     * 
     * Allows customization of the "Apply" button text.
     * @var $dataAX[ 'messages' ][ 'apply' ]: ( String ) ( default: "Apply" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-messages.apply
     * 
     * @code
       Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          messages: {
            apply: "Update"
          }
        })
        </script>
     * @endcode
     * @code
        Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          messages: {
            cancel: "Discard"
          }
        })
        </script>
     * @endcode
     * 
     * Allows customization of the "Cancel" button text.
     * @var $dataAX[ 'messages' ][ 'cancel' ]: ( String ) ( default: "Cancel" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-messages.cancel
     * 
     * @code
       Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          messages: {
            apply: "Update"
          }
        })
        </script>
     * @endcode
     * @code
        Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          messages: {
            cancel: "Discard"
          }
        })
        </script>
     * @endcode
     * @throws string type error
     */
    public function messages ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "messages" => $dataAX );
      
      if ( is_string ( $dataAX[ 'messages' ][ 'apply' ] ) )
      {
        parent::addData ( "messages.apply", $dataAX[ 'messages' ][ 'apply' ] );
        unset ( $dataAX[ 'messages' ][ 'apply' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'messages' ][ 'apply' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::messages ( \$data[ 'messages' ][ 'apply' ] type must be 'String'" );
      }
      
      if ( is_string ( $dataAX[ 'messages' ][ 'cancel' ] ) )
      {
        parent::addData ( "messages.cancel", $dataAX[ 'messages' ][ 'cancel' ] );
        unset ( $dataAX[ 'messages' ][ 'cancel' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'messages' ][ 'cancel' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::messages ( \$data[ 'messages' ][ 'cancel' ] type must be 'String'" );
      }
      
      if ( is_array ( $dataAX[ 'messages' ] ) )
      {
        parent::addData ( "messages", $dataAX[ 'messages' ] );
        unset ( $dataAX[ 'messages' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'messages' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::messages ( \$data[ 'messages' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * When a non-null <b><u>palette</u></b> argument is supplied, the drop-down will be a simple color picker that lists the colors. The following are supported:
     * "basic" -- displays 20 basic colors
     * "websafe" -- display the "web-safe" color palette
     * otherwise, pass a string with colors in HEX representation separated with commas, or an array of colors, and it will display that palette instead. If you pass an array it can contain strings supported by <a href="../framework/kendo#parseColor">parseColor</a> or <a href="../framework/kendo#Color">Color</a> objects.
     * If <b><u>palette</u></b> is missing or <b><u>null</u></b>, the widget will display the HSV selector.
     * @var $dataAX[ 'palette' ]: ( String | Array ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-palette
     * 
     * @code
       Example - use "websafe" palette
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          palette: "websafe"
        });
        </script>
     * @endcode
     * @code
        Example - use list of colors
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          palette: [ "#000", "#333", "#666", "#999", "#ccc", "#fff" ],
          columns: 6
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function palette ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "palette" => $dataAX );
      
      if ( is_string ( $dataAX[ 'palette' ] ) )
      {
        parent::addData ( "palette", $dataAX[ 'palette' ] );
        unset ( $dataAX[ 'palette' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_array ( $dataAX[ 'palette' ] ) )
      {
        parent::addData ( "palette", $dataAX[ 'palette' ] );
        unset ( $dataAX[ 'palette' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'palette' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::palette ( \$data[ 'palette' ] type must be 'String' | 'Array'" );
      }
      
    }
    
    
    /**
     * Only for the HSV selector. If <b><u>true</u></b>, the widget will display the opacity slider. Note that currently in HTML5 the <b><u>&lt;input type="color"&gt;</u></b> does not support opacity.
     * @var $dataAX[ 'opacity' ]: ( Boolean ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-opacity
     * 
     * @code
       Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          opacity: true
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function opacity ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "opacity" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'opacity' ] ) )
      {
        parent::addData ( "opacity", $dataAX[ 'opacity' ] );
        unset ( $dataAX[ 'opacity' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'opacity' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::opacity ( \$data[ 'opacity' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Only applicable for the HSV selector.
     * Displays the color preview element, along with an input field where the end user can paste a color in a CSS-supported notation.
     * @var $dataAX[ 'preview' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-preview
     * 
     * @code
       Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          preview: false
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function preview ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "preview" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'preview' ] ) )
      {
        parent::addData ( "preview", $dataAX[ 'preview' ] );
        unset ( $dataAX[ 'preview' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'preview' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::preview ( \$data[ 'preview' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * A CSS class name to display an icon in the color picker button. If specified, the HTML for the element will look like this:
     * @var $dataAX[ 'toolIcon' ]: ( String ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-toolIcon
     * 
     * @code
       
        <span class="k-tool-icon ${toolIcon}">
          <span class="k-selected-color"></span>
        </span>
     * @endcode
     * @code
        Example
        <input id="colorpicker" type="color" />
        <script>
        $("#colorpicker").kendoColorPicker({
          toolIcon: "k-foreColor"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function toolIcon ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "toolIcon" => $dataAX );
      
      if ( is_string ( $dataAX[ 'toolIcon' ] ) )
      {
        parent::addData ( "toolIcon", $dataAX[ 'toolIcon' ] );
        unset ( $dataAX[ 'toolIcon' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'toolIcon' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::toolIcon ( \$data[ 'toolIcon' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The initially selected color. Note that when initializing the widget from an <b><u>&lt;input&gt;</u></b> element, the initial color will be decided by the field instead.
     * @var $dataAX[ 'value' ]: ( String | Color ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpicker#configuration-value
     * 
     * @code
       Example
        <div id="colorpicker"></div>
        <script>
        $("#colorpicker").kendoColorPicker({
          value: "#b72bba"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function value ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "value" => $dataAX );
      
      if ( is_string ( $dataAX[ 'value' ] ) )
      {
        parent::addData ( "value", $dataAX[ 'value' ] );
        unset ( $dataAX[ 'value' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'value' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPicker::value ( \$data[ 'value' ] type must be 'String' | 'Color'" );
      }
      
    }
    
    
  }