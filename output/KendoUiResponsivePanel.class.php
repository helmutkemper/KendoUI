<?php

  /**
   * Represents the Kendo UI ResponsivePanel widget. Inherits from Widget.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/responsivepanel
   * This method does not remove the widget element from DOM.
   */
  class KendoUiResponsivePanel extends javascript
  {
    private $outputCStr;
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ( $htmlIdAStr, $extraAStr )
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$htmlIdAStr}\" {$extraAStr}>";
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ( $htmlIdALStr, $jsVarALStr = null )
    {
      if ( !is_null ( $jsVarALStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$jsVarALStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$htmlIdALStr}\").KendoUiResponsivePanel({\r\n";
      self::$mainJavaScriptCodeCStr .= self::toObject( javascript::$dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      self::$dataCArr = null;
    }
    
    /**
     * If set to <b><u>false</u></b> the widget will not close when the page content is touched, after it was opened on a mobile device. You will need to call the <a href="http://docs.telerik.com/kendo-ui/api/javascript/ui/responsivepanel#methods-close">close method</a> when the panel needs to close.
     * @var $dataAX[ 'autoClose' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/responsivepanel#configuration-autoClose
     * 
     * @code
       &lt;nav id="navigation"&gt;<br>&nbsp;&nbsp;&lt;a href="#"&gt;Home&lt;/a&gt;<br>&nbsp;&nbsp;&lt;a href="#"&gt;Products&lt;/a&gt;<br>&lt;/nav&gt;<br><br>&lt;article&gt;<br>&nbsp;&nbsp;&lt;button class="k-rpanel-toggle"&gt;&lt;span class="k-icon k-i-hbars"&gt;&lt;/span&gt;&lt;/button&gt;<br><br>&nbsp;&nbsp;Content<br>&lt;/article&gt;<br><br>&lt;script&gt;<br>&nbsp;&nbsp;$("#navigation").kendoResponsivePanel({<br>&nbsp;&nbsp;&nbsp;&nbsp;autoClose: false<br>&nbsp;&nbsp;});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function autoClose ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "autoClose" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'autoClose' ] ) )
      {
        parent::addData ( "autoClose", $dataAX[ 'autoClose' ] );
        unset ( $dataAX[ 'autoClose' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'autoClose' ] ) )
      {
        throw new Exception ( "Type error - KendoUiResponsivePanel::autoClose ( \$data[ 'autoClose' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Specifies the page width at which the widget will be hidden and its toggle button will become visible.
     * @var $dataAX[ 'breakpoint' ]: ( Number ) ( default: 640 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/responsivepanel#configuration-breakpoint
     * 
     * @code
       &lt;nav id="navigation"&gt;<br>&nbsp;&nbsp;&lt;a href="#"&gt;Home&lt;/a&gt;<br>&nbsp;&nbsp;&lt;a href="#"&gt;Products&lt;/a&gt;<br>&lt;/nav&gt;<br><br>&lt;article&gt;<br>&nbsp;&nbsp;&lt;button class="k-rpanel-toggle"&gt;&lt;span class="k-icon k-i-hbars"&gt;&lt;/span&gt;&lt;/button&gt;<br><br>&nbsp;&nbsp;Content<br>&lt;/article&gt;<br><br>&lt;script&gt;<br>&nbsp;&nbsp;$("#navigation").kendoResponsivePanel({<br>&nbsp;&nbsp;&nbsp;&nbsp;breakpoint: 1020<br>&nbsp;&nbsp;});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function breakpoint ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "breakpoint" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'breakpoint' ] ) )
      {
        parent::addData ( "breakpoint", $dataAX[ 'breakpoint' ] );
        unset ( $dataAX[ 'breakpoint' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'breakpoint' ] ) )
      {
        throw new Exception ( "Type error - KendoUiResponsivePanel::breakpoint ( \$data[ 'breakpoint' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * Specifies the direction from which the hidden element will open up, once the toggle button has been activated. Valid values are "left", "right", and "top".
     * @var $dataAX[ 'orientation' ]: ( String ) ( default: "left" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/responsivepanel#configuration-orientation
     * 
     * @code
       &lt;header&gt;<br>&nbsp;&nbsp;&lt;button class="k-rpanel-toggle"&gt;&lt;span class="k-icon k-i-hbars"&gt;&lt;/span&gt;&lt;/button&gt;<br>&nbsp;&nbsp;Logo<br>&lt;/header&gt;<br><br>&lt;nav id="navigation"&gt;<br>&nbsp;&nbsp;&lt;a href="#"&gt;Home&lt;/a&gt;<br>&nbsp;&nbsp;&lt;a href="#"&gt;Products&lt;/a&gt;<br>&lt;/nav&gt;<br><br>&lt;article&gt;<br>&nbsp;&nbsp;Content<br>&lt;/article&gt;<br><br>&lt;script&gt;<br>&nbsp;&nbsp;$("#navigation").kendoResponsivePanel({<br>&nbsp;&nbsp;&nbsp;&nbsp;orientation: "top"<br>&nbsp;&nbsp;});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function orientation ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "orientation" => $dataAX );
      
      if ( is_string ( $dataAX[ 'orientation' ] ) )
      {
        parent::addData ( "orientation", $dataAX[ 'orientation' ] );
        unset ( $dataAX[ 'orientation' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'orientation' ] ) )
      {
        throw new Exception ( "Type error - KendoUiResponsivePanel::orientation ( \$data[ 'orientation' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the selector for the toggle button that will show and hide the responsive panel.
     * @var $dataAX[ 'toggleButton' ]: ( String ) ( default: ".k-rpanel-toggle" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/responsivepanel#configuration-toggleButton
     * 
     * @code
       &lt;header&gt;<br>&nbsp;&nbsp;&lt;button class="toggle-button"&gt;&lt;span class="k-icon k-i-hbars"&gt;&lt;/span&gt;&lt;/button&gt;<br>&nbsp;&nbsp;Logo<br>&lt;/header&gt;<br><br>&lt;nav id="navigation"&gt;<br>&nbsp;&nbsp;&lt;a href="#"&gt;Home&lt;/a&gt;<br>&nbsp;&nbsp;&lt;a href="#"&gt;Products&lt;/a&gt;<br>&lt;/nav&gt;<br><br>&lt;article&gt;<br>&nbsp;&nbsp;Content<br>&lt;/article&gt;<br><br>&lt;script&gt;<br>&nbsp;&nbsp;$("#navigation").kendoResponsivePanel({<br>&nbsp;&nbsp;&nbsp;&nbsp;orientation: "top",<br>&nbsp;&nbsp;&nbsp;&nbsp;toggleButton: ".toggle-button"<br>&nbsp;&nbsp;});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function toggleButton ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "toggleButton" => $dataAX );
      
      if ( is_string ( $dataAX[ 'toggleButton' ] ) )
      {
        parent::addData ( "toggleButton", $dataAX[ 'toggleButton' ] );
        unset ( $dataAX[ 'toggleButton' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'toggleButton' ] ) )
      {
        throw new Exception ( "Type error - KendoUiResponsivePanel::toggleButton ( \$data[ 'toggleButton' ] type must be 'String'" );
      }
      
    }
    
    
  }