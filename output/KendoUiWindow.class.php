<?php

  /**
   * Represents the Kendo UI Window. Inherits from Widget.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/window
   * 
   */
  class KendoUiWindow extends javascript
  {
    private $outputCStr;
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ( $htmlIdAStr, $extraAStr )
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$htmlIdAStr}\" {$extraAStr}>";
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ( $htmlIdALStr, $jsVarALStr = null )
    {
      if ( !is_null ( $jsVarALStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$jsVarALStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$htmlIdALStr}\").KendoUiWindow({\r\n";
      self::$mainJavaScriptCodeCStr .= self::toObject( javascript::$dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      self::$dataCArr = null;
    }
    
    /**
     * The buttons for interacting with the window. Predefined array values are "Close", "Refresh", "Minimize", and "Maximize".
     * @var $dataAX[ 'actions' ]: ( Array ) ( default: ["Close"] )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-actions
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;actions: [ "Minimize", "Maximize" ]<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function actions ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "actions" => $dataAX );
      
      if ( is_array ( $dataAX[ 'actions' ] ) )
      {
        parent::addData ( "actions", $dataAX[ 'actions' ] );
        unset ( $dataAX[ 'actions' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'actions' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::actions ( \$data[ 'actions' ] type must be 'Array'" );
      }
      
    }
    
    
    /**
     * A collection of {Animation} objects, used to change default animations. A value of <strong>false</strong> will disable all animations in the widget.
     * @var $dataAX[ 'animation' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-animation
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: false<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * The animation that will be used when a Window closes.
     * @var $dataAX[ 'animation' ][ 'close' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-animation.close
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;close: false<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;open: false<br>&nbsp;},<br>&nbsp;visible: false<br>});<br>$("#dialog").data("kendoWindow").open();<br>&lt;/script&gt;
     * @endcode
     * 
     * The animation that will be used when a Window opens.
     * @var $dataAX[ 'animation' ][ 'open' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-animation.open
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;close: false<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;open: false<br>&nbsp;},<br>&nbsp;visible: false<br>});<br>$("#dialog").data("kendoWindow").open();<br>&lt;/script&gt;
     * @endcode
     * 
     * Effect to be used for closing of the popup.
     * @var $dataAX[ 'animation' ][ 'close' ][ 'effects' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-animation.close.effects
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;close: {<br>&nbsp;&nbsp;&nbsp;effects: "fade:out"<br>&nbsp;&nbsp;}<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;close: {<br>&nbsp;&nbsp;&nbsp;duration: 2000<br>&nbsp;&nbsp;}<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;open: {<br>&nbsp;&nbsp;&nbsp;effects: "fade:in"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;visible: false<br>});<br>$("#dialog").data("kendoWindow").open();<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;open: {<br>&nbsp;&nbsp;&nbsp;duration: 100<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;visible: false<br>});<br>$("#dialog").data("kendoWindow").open();<br>&lt;/script&gt;
     * @endcode
     * 
     * Defines the close animation duration.
     * @var $dataAX[ 'animation' ][ 'close' ][ 'duration' ]: ( Number )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-animation.close.duration
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;close: {<br>&nbsp;&nbsp;&nbsp;effects: "fade:out"<br>&nbsp;&nbsp;}<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;close: {<br>&nbsp;&nbsp;&nbsp;duration: 2000<br>&nbsp;&nbsp;}<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;open: {<br>&nbsp;&nbsp;&nbsp;effects: "fade:in"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;visible: false<br>});<br>$("#dialog").data("kendoWindow").open();<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;open: {<br>&nbsp;&nbsp;&nbsp;duration: 100<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;visible: false<br>});<br>$("#dialog").data("kendoWindow").open();<br>&lt;/script&gt;
     * @endcode
     * 
     * Effect to be used for opening of the popup.
     * @var $dataAX[ 'animation' ][ 'open' ][ 'effects' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-animation.open.effects
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;close: {<br>&nbsp;&nbsp;&nbsp;effects: "fade:out"<br>&nbsp;&nbsp;}<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;close: {<br>&nbsp;&nbsp;&nbsp;duration: 2000<br>&nbsp;&nbsp;}<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;open: {<br>&nbsp;&nbsp;&nbsp;effects: "fade:in"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;visible: false<br>});<br>$("#dialog").data("kendoWindow").open();<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;open: {<br>&nbsp;&nbsp;&nbsp;duration: 100<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;visible: false<br>});<br>$("#dialog").data("kendoWindow").open();<br>&lt;/script&gt;
     * @endcode
     * 
     * Defines the open animation duration.
     * @var $dataAX[ 'animation' ][ 'open' ][ 'duration' ]: ( Number )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-animation.open.duration
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;close: {<br>&nbsp;&nbsp;&nbsp;effects: "fade:out"<br>&nbsp;&nbsp;}<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;close: {<br>&nbsp;&nbsp;&nbsp;duration: 2000<br>&nbsp;&nbsp;}<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;open: {<br>&nbsp;&nbsp;&nbsp;effects: "fade:in"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;visible: false<br>});<br>$("#dialog").data("kendoWindow").open();<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;animation: {<br>&nbsp;&nbsp;open: {<br>&nbsp;&nbsp;&nbsp;duration: 100<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;visible: false<br>});<br>$("#dialog").data("kendoWindow").open();<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function animation ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "animation" => $dataAX );
      
      if ( is_string ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] ) )
      {
        parent::addData ( "animation.close.effects", $dataAX[ 'animation' ][ 'close' ][ 'effects' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::animation ( \$data[ 'animation' ][ 'close' ][ 'effects' ] type must be 'String'" );
      }
      
      if ( is_numeric ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] ) )
      {
        parent::addData ( "animation.close.duration", $dataAX[ 'animation' ][ 'close' ][ 'duration' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::animation ( \$data[ 'animation' ][ 'close' ][ 'duration' ] type must be 'Number'" );
      }
      
      if ( is_string ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] ) )
      {
        parent::addData ( "animation.open.effects", $dataAX[ 'animation' ][ 'open' ][ 'effects' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::animation ( \$data[ 'animation' ][ 'open' ][ 'effects' ] type must be 'String'" );
      }
      
      if ( is_numeric ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] ) )
      {
        parent::addData ( "animation.open.duration", $dataAX[ 'animation' ][ 'open' ][ 'duration' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::animation ( \$data[ 'animation' ][ 'open' ][ 'duration' ] type must be 'Number'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ][ 'close' ] ) )
      {
        parent::addData ( "animation.close", $dataAX[ 'animation' ][ 'close' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::animation ( \$data[ 'animation' ][ 'close' ] type must be 'Object'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ][ 'open' ] ) )
      {
        parent::addData ( "animation.open", $dataAX[ 'animation' ][ 'open' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::animation ( \$data[ 'animation' ][ 'open' ] type must be 'Object'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ] ) )
      {
        parent::addData ( "animation", $dataAX[ 'animation' ] );
        unset ( $dataAX[ 'animation' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::animation ( \$data[ 'animation' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * The element that the Window will be appended to. Beneficial if the <a href="/kendo-ui/web/window/overview#using-kendo-ui-window-with-a-form">Window is used together with a form</a>. Note that this <em>does not</em> constrain the window dragging within the given element.
     * @var $dataAX[ 'appendTo' ]: ( Object | String ) ( default: document.body )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-appendTo
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;appendTo: "form#mainForm"<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function appendTo ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "appendTo" => $dataAX );
      
      if ( is_array ( $dataAX[ 'appendTo' ] ) )
      {
        parent::addData ( "appendTo", $dataAX[ 'appendTo' ] );
        unset ( $dataAX[ 'appendTo' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_string ( $dataAX[ 'appendTo' ] ) )
      {
        parent::addData ( "appendTo", $dataAX[ 'appendTo' ] );
        unset ( $dataAX[ 'appendTo' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'appendTo' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::appendTo ( \$data[ 'appendTo' ] type must be 'Object' | 'String'" );
      }
      
    }
    
    
    /**
     * Determines whether the Window will be focused automatically when opened. The property also influences the focus behavior when the Window is clicked when already opened.
     * @var $dataAX[ 'autoFocus' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-autoFocus
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;autoFocus: false<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function autoFocus ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "autoFocus" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'autoFocus' ] ) )
      {
        parent::addData ( "autoFocus", $dataAX[ 'autoFocus' ] );
        unset ( $dataAX[ 'autoFocus' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'autoFocus' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::autoFocus ( \$data[ 'autoFocus' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Specifies a URL or request options that the window should load its content from.
     * Note: For URLs starting with a protocol (e.g. http://), a container iframe element is automatically created. This behavior may change in future versions, so it is advisable to always use the <a href="http://docs.telerik.com/kendo-ui/api/javascript/ui/window#iframe">iframe configuration option</a>.
     * @var $dataAX[ 'content' ]: ( Object | String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-content
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;content: "/details"<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * Template for the content of a <strong>Window</strong>. Returned data from the server will be given as the <b><u>data</u></b> of this template. Note that if the returned data is JSON, the <a href="http://api.jquery.com/jQuery.ajax/"><b><u>dataType</u></b> parameter</a> should be passed, so that the data gets parsed by jQuery.
     * If the URL contains a protocol, set <b><u>iframe</u></b> to <b><u>false</u></b>, otherwise the JSON response will be injected "as is" in the Window content area.
     * @var $dataAX[ 'content' ][ 'template' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-content.template
     * 
     * @code
       &lt;div id="dialog"&gt;<br>&nbsp;&nbsp;&lt;p&gt;&lt;strong&gt;This example will not work, unless you define a valid JSON service URL for `content.url`.&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;The expected JSON response is:<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;pre&gt;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;{ username: "...my username here..." }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/pre&gt;<br>&nbsp;&nbsp;&lt;/strong&gt;&lt;/p&gt;&nbsp;&nbsp;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;content: {<br>&nbsp;&nbsp;url: "/userDetails",<br>&nbsp;&nbsp;dataType: "json",<br>&nbsp;&nbsp;iframe: false,<br>&nbsp;&nbsp;template: "User name: #= data.username #"<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function content ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "content" => $dataAX );
      
      if ( is_string ( $dataAX[ 'content' ][ 'template' ] ) )
      {
        parent::addData ( "content.template", $dataAX[ 'content' ][ 'template' ] );
        unset ( $dataAX[ 'content' ][ 'template' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'content' ][ 'template' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::content ( \$data[ 'content' ][ 'template' ] type must be 'String'" );
      }
      
      if ( is_array ( $dataAX[ 'content' ] ) )
      {
        parent::addData ( "content", $dataAX[ 'content' ] );
        unset ( $dataAX[ 'content' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_string ( $dataAX[ 'content' ] ) )
      {
        parent::addData ( "content", $dataAX[ 'content' ] );
        unset ( $dataAX[ 'content' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'content' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::content ( \$data[ 'content' ] type must be 'Object' | 'String'" );
      }
      
    }
    
    
    /**
     * Enables (<strong>true</strong>) or disables (<strong>false</strong>) the ability for users to move/drag the widget.
     * @var $dataAX[ 'draggable' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-draggable
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;draggable: false<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function draggable ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "draggable" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'draggable' ] ) )
      {
        parent::addData ( "draggable", $dataAX[ 'draggable' ] );
        unset ( $dataAX[ 'draggable' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'draggable' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::draggable ( \$data[ 'draggable' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Explicitly states whether a content iframe should be created. For more information, please read <a href="/kendo-ui/web/window/overview#using-iframes">Using iframes</a>.
     * @var $dataAX[ 'iframe' ]: ( Boolean )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-iframe
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;content: "http://www.telerik.com/",<br>&nbsp;iframe: true<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function iframe ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "iframe" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'iframe' ] ) )
      {
        parent::addData ( "iframe", $dataAX[ 'iframe' ] );
        unset ( $dataAX[ 'iframe' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'iframe' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::iframe ( \$data[ 'iframe' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * The maximum height (in pixels) that may be achieved by resizing the window.
     * @var $dataAX[ 'maxHeight' ]: ( Number ) ( default: Infinity )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-maxHeight
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;maxHeight: 300<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function maxHeight ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "maxHeight" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'maxHeight' ] ) )
      {
        parent::addData ( "maxHeight", $dataAX[ 'maxHeight' ] );
        unset ( $dataAX[ 'maxHeight' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'maxHeight' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::maxHeight ( \$data[ 'maxHeight' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * The maximum width (in pixels) that may be achieved by resizing the window.
     * @var $dataAX[ 'maxWidth' ]: ( Number ) ( default: Infinity )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-maxWidth
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;maxWidth: 300<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function maxWidth ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "maxWidth" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'maxWidth' ] ) )
      {
        parent::addData ( "maxWidth", $dataAX[ 'maxWidth' ] );
        unset ( $dataAX[ 'maxWidth' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'maxWidth' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::maxWidth ( \$data[ 'maxWidth' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * The minimum height (in pixels) that may be achieved by resizing the window.
     * @var $dataAX[ 'minHeight' ]: ( Number ) ( default: 50 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-minHeight
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;minHeight: 100<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function minHeight ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "minHeight" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'minHeight' ] ) )
      {
        parent::addData ( "minHeight", $dataAX[ 'minHeight' ] );
        unset ( $dataAX[ 'minHeight' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'minHeight' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::minHeight ( \$data[ 'minHeight' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * The minimum width (in pixels) that may be achieved by resizing the window.
     * @var $dataAX[ 'minWidth' ]: ( Number ) ( default: 50 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-minWidth
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;minWidth: 100<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function minWidth ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "minWidth" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'minWidth' ] ) )
      {
        parent::addData ( "minWidth", $dataAX[ 'minWidth' ] );
        unset ( $dataAX[ 'minWidth' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'minWidth' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::minWidth ( \$data[ 'minWidth' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * Specifies whether the window should show a modal overlay over the page.
     * @var $dataAX[ 'modal' ]: ( Boolean ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-modal
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;modal: true<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function modal ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "modal" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'modal' ] ) )
      {
        parent::addData ( "modal", $dataAX[ 'modal' ] );
        unset ( $dataAX[ 'modal' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'modal' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::modal ( \$data[ 'modal' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Specifies whether the window should be pinned, i.e. it will not move together with the page content during scrolling.
     * @var $dataAX[ 'pinned' ]: ( Boolean ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-pinned
     * 
     * @code
       &lt;div style="height: 5000px;"&gt;&lt;/div&gt;<br>&lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;pinned: true,<br>&nbsp;position: { top: 100 }<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function pinned ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "pinned" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'pinned' ] ) )
      {
        parent::addData ( "pinned", $dataAX[ 'pinned' ] );
        unset ( $dataAX[ 'pinned' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'pinned' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::pinned ( \$data[ 'pinned' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * A collection of one or two members, which define the initial Window's top and/or left position on the page.
     * @var $dataAX[ 'position' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-position
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;position: {<br>&nbsp;&nbsp;top: 100, // or "100px"<br>&nbsp;&nbsp;left: "20%"<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * Specifies the initial top position of the window. Numeric values are treated as pixels. String values can specify pixels, percentages, ems or other valid values.
     * @var $dataAX[ 'position' ][ 'top' ]: ( Number | String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-position.top
     * 
     * Specifies the initial left position of the window. Numeric values are treated as pixels. String values can specify pixels or percentages, ems or other valid values.
     * @var $dataAX[ 'position' ][ 'left' ]: ( Number | String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-position.left
     * @throws string type error
     */
    public function position ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "position" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'position' ][ 'top' ] ) )
      {
        parent::addData ( "position.top", $dataAX[ 'position' ][ 'top' ] );
        unset ( $dataAX[ 'position' ][ 'top' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_string ( $dataAX[ 'position' ][ 'top' ] ) )
      {
        parent::addData ( "position.top", $dataAX[ 'position' ][ 'top' ] );
        unset ( $dataAX[ 'position' ][ 'top' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'position' ][ 'top' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::position ( \$data[ 'position' ][ 'top' ] type must be 'Number' | 'String'" );
      }
      
      if ( is_numeric ( $dataAX[ 'position' ][ 'left' ] ) )
      {
        parent::addData ( "position.left", $dataAX[ 'position' ][ 'left' ] );
        unset ( $dataAX[ 'position' ][ 'left' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_string ( $dataAX[ 'position' ][ 'left' ] ) )
      {
        parent::addData ( "position.left", $dataAX[ 'position' ][ 'left' ] );
        unset ( $dataAX[ 'position' ][ 'left' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'position' ][ 'left' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::position ( \$data[ 'position' ][ 'left' ] type must be 'Number' | 'String'" );
      }
      
      if ( is_array ( $dataAX[ 'position' ] ) )
      {
        parent::addData ( "position", $dataAX[ 'position' ] );
        unset ( $dataAX[ 'position' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'position' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::position ( \$data[ 'position' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * Enables (<strong>true</strong>) or disables (<strong>false</strong>) the ability for users to resize a <strong>Window</strong>.
     * @var $dataAX[ 'resizable' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-resizable
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;resizable: false<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function resizable ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "resizable" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'resizable' ] ) )
      {
        parent::addData ( "resizable", $dataAX[ 'resizable' ] );
        unset ( $dataAX[ 'resizable' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'resizable' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::resizable ( \$data[ 'resizable' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * The text in the window title bar. If <b><u>false</u></b>, the window will be displayed without a title bar. Note that this will prevent the window from being dragged, and the window titlebar buttons will not be shown.
     * @var $dataAX[ 'title' ]: ( String | Boolean )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-title
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;title: "Customer details"<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;title: false<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function title ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "title" => $dataAX );
      
      if ( is_string ( $dataAX[ 'title' ] ) )
      {
        parent::addData ( "title", $dataAX[ 'title' ] );
        unset ( $dataAX[ 'title' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_bool ( $dataAX[ 'title' ] ) )
      {
        parent::addData ( "title", $dataAX[ 'title' ] );
        unset ( $dataAX[ 'title' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'title' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::title ( \$data[ 'title' ] type must be 'String' | 'Boolean'" );
      }
      
    }
    
    
    /**
     * Specifies whether the window will be initially visible.
     * @var $dataAX[ 'visible' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-visible
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;visible: false<br>});<br>setTimeout(function() {<br>&nbsp;$("#dialog").data("kendoWindow").open();<br>}, 1000);<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function visible ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "visible" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'visible' ] ) )
      {
        parent::addData ( "visible", $dataAX[ 'visible' ] );
        unset ( $dataAX[ 'visible' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'visible' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::visible ( \$data[ 'visible' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Specifies width of the window.
     * @var $dataAX[ 'width' ]: ( Number | String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-width
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;width: 400<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;width: "50%"<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function width ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "width" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'width' ] ) )
      {
        parent::addData ( "width", $dataAX[ 'width' ] );
        unset ( $dataAX[ 'width' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_string ( $dataAX[ 'width' ] ) )
      {
        parent::addData ( "width", $dataAX[ 'width' ] );
        unset ( $dataAX[ 'width' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'width' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::width ( \$data[ 'width' ] type must be 'Number' | 'String'" );
      }
      
    }
    
    
    /**
     * Specifies height of the window.
     * @var $dataAX[ 'height' ]: ( Number | String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/window#configuration-height
     * 
     * @code
       &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;height: 400<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="dialog"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#dialog").kendoWindow({<br>&nbsp;height: "50%"<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function height ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "height" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'height' ] ) )
      {
        parent::addData ( "height", $dataAX[ 'height' ] );
        unset ( $dataAX[ 'height' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_string ( $dataAX[ 'height' ] ) )
      {
        parent::addData ( "height", $dataAX[ 'height' ] );
        unset ( $dataAX[ 'height' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'height' ] ) )
      {
        throw new Exception ( "Type error - KendoUiWindow::height ( \$data[ 'height' ] type must be 'Number' | 'String'" );
      }
      
    }
    
    
  }