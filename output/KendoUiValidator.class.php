<?php

  /**
   * The template which renders the validation message.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/validator
   * 
   */
  class KendoUiValidator extends javascript
  {
    private $outputCStr;
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ( $htmlIdAStr, $extraAStr )
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$htmlIdAStr}\" {$extraAStr}>";
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ( $htmlIdALStr, $jsVarALStr = null )
    {
      if ( !is_null ( $jsVarALStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$jsVarALStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$htmlIdALStr}\").KendoUiValidator({\r\n";
      self::$mainJavaScriptCodeCStr .= self::toObject( javascript::$dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      self::$dataCArr = null;
    }
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> which renders the validation message.
     * @var $dataAX[ 'errorTemplate' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/validator#configuration-errorTemplate
     * 
     * @code
       &lt;form id="myform"&gt;<br>&nbsp;&nbsp;&lt;input name="username" required /&gt; &lt;br /&gt;<br>&nbsp;&nbsp;&lt;button&gt;Validate&lt;/button&gt;<br>&lt;/form&gt;<br><br>&lt;script&gt;<br>&nbsp;&nbsp;$("#myform").kendoValidator({<br>&nbsp;&nbsp;&nbsp;&nbsp;errorTemplate: "&lt;span&gt;#=message#&lt;/span&gt;"<br>&nbsp;&nbsp;});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function errorTemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "errorTemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'errorTemplate' ] ) )
      {
        parent::addData ( "errorTemplate", $dataAX[ 'errorTemplate' ] );
        unset ( $dataAX[ 'errorTemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'errorTemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiValidator::errorTemplate ( \$data[ 'errorTemplate' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Set of messages (either strings or functions) which will be shown when given validation rule fails. By setting already existing key the appropriate built-in message will be overridden.
     * @var $dataAX[ 'messages' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/validator#configuration-messages
     * 
     * @code
       &lt;form id="myform"&gt;<br>&nbsp;&nbsp;&lt;input name="username" required /&gt; &lt;br /&gt;<br>&nbsp;&nbsp;&lt;input type="email" name="userEmail" required data-message="My custom email message" /&gt; &lt;br /&gt;<br>&nbsp;&nbsp;&lt;button&gt;Validate&lt;/button&gt;<br>&lt;/form&gt;<br><br>&lt;script&gt;<br>&nbsp;&nbsp;$("#myform").kendoValidator({<br>&nbsp;&nbsp;&nbsp;&nbsp; messages: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // defines a message for the 'custom' validation rule<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; custom: "Please enter valid value for my custom rule",<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // overrides the built-in message for the required rule<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; required: "My custom required message",<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // overrides the built-in message for the email rule<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // with a custom function that returns the actual message<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; email: function(input) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return getMessage(input);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp; },<br>&nbsp;&nbsp;&nbsp;&nbsp; rules: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; custom: function(input) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (input.is("[name=username]")) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return input.val() === "Tom";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;});<br><br>&nbsp;&nbsp;function getMessage(input) {<br>&nbsp;&nbsp;&nbsp;return input.data("message");<br>&nbsp;&nbsp;}<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function messages ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "messages" => $dataAX );
      
      if ( is_array ( $dataAX[ 'messages' ] ) )
      {
        parent::addData ( "messages", $dataAX[ 'messages' ] );
        unset ( $dataAX[ 'messages' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'messages' ] ) )
      {
        throw new Exception ( "Type error - KendoUiValidator::messages ( \$data[ 'messages' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * Set of custom validation rules. Those rules will extend the <a href="/kendo-ui/framework/validator/overview#default-validation-rules">built-in ones</a>.
     * @var $dataAX[ 'rules' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/validator#configuration-rules
     * 
     * @code
       &lt;form id="myform"&gt;<br>&nbsp;&nbsp;&lt;input name="username"/&gt; &lt;br /&gt;<br>&nbsp;&nbsp;&lt;input name="town" /&gt; &lt;br /&gt;<br>&nbsp;&nbsp;&lt;button&gt;Validate&lt;/button&gt;<br>&lt;/form&gt;<br><br>&lt;script&gt;<br>&nbsp;&nbsp;$("#myform").kendoValidator({<br>&nbsp;&nbsp;&nbsp;rules: {<br>&nbsp;&nbsp;&nbsp;&nbsp;customRule1: function(input){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// all of the input must have a value<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return $.trim(input.val()) !== "";<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;customRule2: function(input) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//only 'Tom' will be valid value for the username input<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (input.is("[name=username]")) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return input.val() === "Tom";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;messages: {<br>&nbsp;&nbsp;&nbsp;&nbsp;customRule1: "All fields are required",<br>&nbsp;&nbsp;&nbsp;&nbsp;customRule2: "Your UserName must be Tom"<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function rules ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "rules" => $dataAX );
      
      if ( is_array ( $dataAX[ 'rules' ] ) )
      {
        parent::addData ( "rules", $dataAX[ 'rules' ] );
        unset ( $dataAX[ 'rules' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'rules' ] ) )
      {
        throw new Exception ( "Type error - KendoUiValidator::rules ( \$data[ 'rules' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * Determines if validation will be triggered when element loses focus. Default value is true.
     * @var $dataAX[ 'validateOnBlur' ]: ( Boolean )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/validator#configuration-validateOnBlur
     * 
     * @code
       &lt;form id="myform"&gt;<br>&nbsp;&nbsp;&lt;input name="username"/&gt; &lt;br /&gt;<br>&nbsp;&nbsp;&lt;button&gt;Validate&lt;/button&gt;<br>&lt;/form&gt;<br><br>&lt;script&gt;<br>&nbsp;&nbsp;$("#myform").kendoValidator({<br>&nbsp;&nbsp;&nbsp;validateOnBlur: false<br>&nbsp;&nbsp;});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function validateOnBlur ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "validateOnBlur" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'validateOnBlur' ] ) )
      {
        parent::addData ( "validateOnBlur", $dataAX[ 'validateOnBlur' ] );
        unset ( $dataAX[ 'validateOnBlur' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'validateOnBlur' ] ) )
      {
        throw new Exception ( "Type error - KendoUiValidator::validateOnBlur ( \$data[ 'validateOnBlur' ] type must be 'Boolean'" );
      }
      
    }
    
    
  }