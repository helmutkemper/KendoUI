<?php

  /**
   * Represents the Kendo UI TreeView. Inherits from Widget.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview
   * Setting autoBind to false is useful when multiple widgets are bound to the same data source. Disabling automatic binding ensures that the shared data source does not make more than one request to the remote service.
   */
  class KendoUiTreeView extends javascript
  {
    private $outputCStr;
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ( $htmlIdAStr, $extraAStr )
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$htmlIdAStr}\" {$extraAStr}>";
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ( $htmlIdALStr, $jsVarALStr = null )
    {
      if ( !is_null ( $jsVarALStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$jsVarALStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$htmlIdALStr}\").KendoUiTreeView({\r\n";
      self::$mainJavaScriptCodeCStr .= self::toObject( javascript::$dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      self::$dataCArr = null;
    }
    
    /**
     * A collection of visual animations used when items are expanded or collapsed through user interaction. Setting this option to <strong>false</strong> will disable all animations.
     * @var $dataAX[ 'animation' ]: ( Boolean | Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-animation
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: false,<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * The animation that will be used when collapsing items.
     * @var $dataAX[ 'animation' ][ 'collapse' ]: ( Boolean | Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-animation.collapse
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;collapse: false<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;expand: false<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * The animation that will be used when expanding items.
     * @var $dataAX[ 'animation' ][ 'expand' ]: ( Boolean | Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-animation.expand
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;collapse: false<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;expand: false<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * The number of milliseconds used for the animation when a node is expanded.
     * @var $dataAX[ 'animation' ][ 'collapse' ][ 'duration' ]: ( Number ) ( default: 200 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-animation.collapse.duration
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;collapse: {<br>&nbsp;&nbsp;&nbsp;duration: 400<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;collapse: {<br>&nbsp;&nbsp;&nbsp;effects: "fadeOut collapseVertical"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;expand: {<br>&nbsp;&nbsp;&nbsp;duration: 600<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;expand: {<br>&nbsp;&nbsp;&nbsp;effects: "fadeIn expandVertical"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * A whitespace-delimited string of animation effects that are used when collapsing nodes. The supported effects are <strong>fadeOut</strong> and <strong>collapseVertical</strong>.
     * @var $dataAX[ 'animation' ][ 'collapse' ][ 'effects' ]: ( String ) ( default: 200 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-animation.collapse.effects
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;collapse: {<br>&nbsp;&nbsp;&nbsp;duration: 400<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;collapse: {<br>&nbsp;&nbsp;&nbsp;effects: "fadeOut collapseVertical"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;expand: {<br>&nbsp;&nbsp;&nbsp;duration: 600<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;expand: {<br>&nbsp;&nbsp;&nbsp;effects: "fadeIn expandVertical"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * The number of milliseconds used for the animation when a node is expanded.
     * @var $dataAX[ 'animation' ][ 'expand' ][ 'duration' ]: ( Number ) ( default: "expandVertical" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-animation.expand.duration
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;collapse: {<br>&nbsp;&nbsp;&nbsp;duration: 400<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;collapse: {<br>&nbsp;&nbsp;&nbsp;effects: "fadeOut collapseVertical"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;expand: {<br>&nbsp;&nbsp;&nbsp;duration: 600<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;expand: {<br>&nbsp;&nbsp;&nbsp;effects: "fadeIn expandVertical"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * A whitespace-delimited string of animation effects that are used when expanding nodes. The supported effects are <strong>"expandVertical"</strong> and <strong>"fadeIn"</strong>.
     * @var $dataAX[ 'animation' ][ 'expand' ][ 'effects' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-animation.expand.effects
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;collapse: {<br>&nbsp;&nbsp;&nbsp;duration: 400<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;collapse: {<br>&nbsp;&nbsp;&nbsp;effects: "fadeOut collapseVertical"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;expand: {<br>&nbsp;&nbsp;&nbsp;duration: 600<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;animation: {<br>&nbsp;&nbsp;expand: {<br>&nbsp;&nbsp;&nbsp;effects: "fadeIn expandVertical"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function animation ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "animation" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'animation' ][ 'collapse' ][ 'duration' ] ) )
      {
        parent::addData ( "animation.collapse.duration", $dataAX[ 'animation' ][ 'collapse' ][ 'duration' ] );
        unset ( $dataAX[ 'animation' ][ 'collapse' ][ 'duration' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'collapse' ][ 'duration' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::animation ( \$data[ 'animation' ][ 'collapse' ][ 'duration' ] type must be 'Number'" );
      }
      
      if ( is_string ( $dataAX[ 'animation' ][ 'collapse' ][ 'effects' ] ) )
      {
        parent::addData ( "animation.collapse.effects", $dataAX[ 'animation' ][ 'collapse' ][ 'effects' ] );
        unset ( $dataAX[ 'animation' ][ 'collapse' ][ 'effects' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'collapse' ][ 'effects' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::animation ( \$data[ 'animation' ][ 'collapse' ][ 'effects' ] type must be 'String'" );
      }
      
      if ( is_numeric ( $dataAX[ 'animation' ][ 'expand' ][ 'duration' ] ) )
      {
        parent::addData ( "animation.expand.duration", $dataAX[ 'animation' ][ 'expand' ][ 'duration' ] );
        unset ( $dataAX[ 'animation' ][ 'expand' ][ 'duration' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'expand' ][ 'duration' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::animation ( \$data[ 'animation' ][ 'expand' ][ 'duration' ] type must be 'Number'" );
      }
      
      if ( is_string ( $dataAX[ 'animation' ][ 'expand' ][ 'effects' ] ) )
      {
        parent::addData ( "animation.expand.effects", $dataAX[ 'animation' ][ 'expand' ][ 'effects' ] );
        unset ( $dataAX[ 'animation' ][ 'expand' ][ 'effects' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'expand' ][ 'effects' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::animation ( \$data[ 'animation' ][ 'expand' ][ 'effects' ] type must be 'String'" );
      }
      
      if ( is_bool ( $dataAX[ 'animation' ][ 'collapse' ] ) )
      {
        parent::addData ( "animation.collapse", $dataAX[ 'animation' ][ 'collapse' ] );
        unset ( $dataAX[ 'animation' ][ 'collapse' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_array ( $dataAX[ 'animation' ][ 'collapse' ] ) )
      {
        parent::addData ( "animation.collapse", $dataAX[ 'animation' ][ 'collapse' ] );
        unset ( $dataAX[ 'animation' ][ 'collapse' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'collapse' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::animation ( \$data[ 'animation' ][ 'collapse' ] type must be 'Boolean' | 'Object'" );
      }
      
      if ( is_bool ( $dataAX[ 'animation' ][ 'expand' ] ) )
      {
        parent::addData ( "animation.expand", $dataAX[ 'animation' ][ 'expand' ] );
        unset ( $dataAX[ 'animation' ][ 'expand' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_array ( $dataAX[ 'animation' ][ 'expand' ] ) )
      {
        parent::addData ( "animation.expand", $dataAX[ 'animation' ][ 'expand' ] );
        unset ( $dataAX[ 'animation' ][ 'expand' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'expand' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::animation ( \$data[ 'animation' ][ 'expand' ] type must be 'Boolean' | 'Object'" );
      }
      
      if ( is_bool ( $dataAX[ 'animation' ] ) )
      {
        parent::addData ( "animation", $dataAX[ 'animation' ] );
        unset ( $dataAX[ 'animation' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_array ( $dataAX[ 'animation' ] ) )
      {
        parent::addData ( "animation", $dataAX[ 'animation' ] );
        unset ( $dataAX[ 'animation' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::animation ( \$data[ 'animation' ] type must be 'Boolean' | 'Object'" );
      }
      
    }
    
    
    /**
     * If set to <b><u>false</u></b> the widget will not bind to the data source during initialization. In this case data binding will occur when the <a href="/kendo-ui/api/framework/datasource#events-change">change</a> event of the data source is fired. By default the widget will bind to the data source specified in the configuration.
     * Setting <code>autoBind</code> to <code>false</code> is useful when multiple widgets are bound to the same data source. Disabling automatic binding ensures that the shared data source does not make more than one request to the remote service.
     * 
     * ( ! ) Setting <b><u>autoBind</u></b> to <b><u>false</u></b> is useful when multiple widgets are bound to the same data source. Disabling automatic binding ensures that the shared data source does not make more than one request to the remote service.
     * @var $dataAX[ 'autoBind' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-autoBind
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>var dataSource = new kendo.data.HierarchicalDataSource({<br>&nbsp;data: [ { text: "Jane Doe" }, { text: "John Doe" }]<br>});<br>$("#treeview").kendoTreeView({<br>&nbsp;autoBind: false,<br>&nbsp;dataSource: dataSource<br>});<br>dataSource.read(); // "read()" will fire the "change" event of the dataSource and the widget will be bound<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function autoBind ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "autoBind" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'autoBind' ] ) )
      {
        parent::addData ( "autoBind", $dataAX[ 'autoBind' ] );
        unset ( $dataAX[ 'autoBind' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'autoBind' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::autoBind ( \$data[ 'autoBind' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * If set to <b><u>true</u></b> the widget will auto-scroll the containing element when the mouse/finger is close to the top/bottom of it.
     * @var $dataAX[ 'autoScroll' ]: ( Boolean ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-autoScroll
     * 
     * @code
       &lt;div style="height: 200px; overflow: auto"&gt;<br>&nbsp;&nbsp;&lt;div style="height:1500px"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id="treeview"&gt;&lt;/div&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>var dataSource = new kendo.data.HierarchicalDataSource({<br>&nbsp;data: [ { text: "Jane Doe" }, { text: "John Doe" }]<br>});<br><br>$("#treeview").kendoTreeView({<br>&nbsp;autoScroll: true,<br>&nbsp;dataSource: dataSource<br>});<br>dataSource.read(); // "read()" will fire the "change" event of the dataSource and the widget will be bound<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function autoScroll ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "autoScroll" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'autoScroll' ] ) )
      {
        parent::addData ( "autoScroll", $dataAX[ 'autoScroll' ] );
        unset ( $dataAX[ 'autoScroll' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'autoScroll' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::autoScroll ( \$data[ 'autoScroll' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * If <b><u>true</u></b> or an object, renders checkboxes beside each node.
     * @var $dataAX[ 'checkboxes' ]: ( Boolean | Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-checkboxes
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;checkboxes: true,<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * Indicates whether checkboxes of child items should get checked when the checkbox of a parent item is checked. This also enables tri-state checkboxes with an indeterminate state.
     * @var $dataAX[ 'checkboxes' ][ 'checkChildren' ]: ( Boolean ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-checkboxes.checkChildren
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;checkboxes: {<br>&nbsp;&nbsp;checkChildren: true<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;checkboxes: {<br>&nbsp;&nbsp;name: "checkedItems[]"<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;checkboxes: {<br>&nbsp;&nbsp;template: "&lt;input type='checkbox' name='checkedFiles[#= item.id #]' value='true' /&gt;"<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ id: 1, text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ id: 2, text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * Sets the name attribute of the checkbox inputs. That name will be posted to the server.
     * @var $dataAX[ 'checkboxes' ][ 'name' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-checkboxes.name
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;checkboxes: {<br>&nbsp;&nbsp;checkChildren: true<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;checkboxes: {<br>&nbsp;&nbsp;name: "checkedItems[]"<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;checkboxes: {<br>&nbsp;&nbsp;template: "&lt;input type='checkbox' name='checkedFiles[#= item.id #]' value='true' /&gt;"<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ id: 1, text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ id: 2, text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> which renders the checkboxes. Can be used to allow posting of additional information along the TreeView checkboxes.
     * The fields which can be used in the template are:
     * @var $dataAX[ 'checkboxes' ][ 'template' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-checkboxes.template
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;checkboxes: {<br>&nbsp;&nbsp;checkChildren: true<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;checkboxes: {<br>&nbsp;&nbsp;name: "checkedItems[]"<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;checkboxes: {<br>&nbsp;&nbsp;template: "&lt;input type='checkbox' name='checkedFiles[#= item.id #]' value='true' /&gt;"<br>&nbsp;},<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ id: 1, text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ id: 2, text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function checkboxes ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "checkboxes" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'checkboxes' ][ 'checkChildren' ] ) )
      {
        parent::addData ( "checkboxes.checkChildren", $dataAX[ 'checkboxes' ][ 'checkChildren' ] );
        unset ( $dataAX[ 'checkboxes' ][ 'checkChildren' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'checkboxes' ][ 'checkChildren' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::checkboxes ( \$data[ 'checkboxes' ][ 'checkChildren' ] type must be 'Boolean'" );
      }
      
      if ( is_string ( $dataAX[ 'checkboxes' ][ 'name' ] ) )
      {
        parent::addData ( "checkboxes.name", $dataAX[ 'checkboxes' ][ 'name' ] );
        unset ( $dataAX[ 'checkboxes' ][ 'name' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'checkboxes' ][ 'name' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::checkboxes ( \$data[ 'checkboxes' ][ 'name' ] type must be 'String'" );
      }
      
      if ( is_string ( $dataAX[ 'checkboxes' ][ 'template' ] ) )
      {
        parent::addData ( "checkboxes.template", $dataAX[ 'checkboxes' ][ 'template' ] );
        unset ( $dataAX[ 'checkboxes' ][ 'template' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'checkboxes' ][ 'template' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::checkboxes ( \$data[ 'checkboxes' ][ 'template' ] type must be 'String' | 'Function'" );
      }
      
      if ( is_bool ( $dataAX[ 'checkboxes' ] ) )
      {
        parent::addData ( "checkboxes", $dataAX[ 'checkboxes' ] );
        unset ( $dataAX[ 'checkboxes' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_array ( $dataAX[ 'checkboxes' ] ) )
      {
        parent::addData ( "checkboxes", $dataAX[ 'checkboxes' ] );
        unset ( $dataAX[ 'checkboxes' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'checkboxes' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::checkboxes ( \$data[ 'checkboxes' ] type must be 'Boolean' | 'Object'" );
      }
      
    }
    
    
    /**
     * Sets the field of the data item that provides the image URL of the TreeView nodes.
     * @var $dataAX[ 'dataImageUrlField' ]: ( String ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-dataImageUrlField
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>var items = [<br>&nbsp;{ text: "Mail", image: "http://demos.telerik.com/kendo-ui/content/web/treeview/mail.png" },<br>&nbsp;{ text: "Search", image: "http://demos.telerik.com/kendo-ui/content/web/treeview/search.png" }<br>];<br>$("#treeview").kendoTreeView({<br>&nbsp;dataImageUrlField: "image",<br>&nbsp;dataSource: items<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function dataImageUrlField ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dataImageUrlField" => $dataAX );
      
      if ( is_string ( $dataAX[ 'dataImageUrlField' ] ) )
      {
        parent::addData ( "dataImageUrlField", $dataAX[ 'dataImageUrlField' ] );
        unset ( $dataAX[ 'dataImageUrlField' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dataImageUrlField' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::dataImageUrlField ( \$data[ 'dataImageUrlField' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The data source of the widget which is used render nodes. Can be a JavaScript object which represents a valid data source configuration, a JavaScript array or an existing <a href="/kendo-ui/api/framework/hierarchicaldatasource">kendo.data.HierarchicalDataSource</a> instance.
     * If the <b><u>dataSource</u></b> option is set to a JavaScript object or array the widget will initialize a new <a href="/kendo-ui/api/framework/hierarchicaldatasource">kendo.data.HierarchicalDataSource</a> instance using that value as data source configuration.
     * If the <b><u>dataSource</u></b> option is an existing <a href="/kendo-ui/api/framework/hierarchicaldatasource">kendo.data.HierarchicalDataSource</a> instance the widget will use that instance and will <strong>not</strong> initialize a new one.
     * @var $dataAX[ 'dataSource' ]: ( Object | Array | kendo.data.HierarchicalDataSource )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-dataSource
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: {<br>&nbsp;&nbsp;data: [<br>&nbsp;&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;&nbsp;] }<br>&nbsp;&nbsp;]<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>var dataSource = new kendo.data.HierarchicalDataSource({<br>&nbsp;transport: {<br>&nbsp;&nbsp;read: {<br>&nbsp;&nbsp;&nbsp;url: "http://demos.telerik.com/kendo-ui/service/Employees",<br>&nbsp;&nbsp;&nbsp;dataType: "jsonp"<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;schema: {<br>&nbsp;&nbsp;model: {<br>&nbsp;&nbsp;&nbsp;id: "EmployeeId",<br>&nbsp;&nbsp;&nbsp;hasChildren: "HasEmployees"<br>&nbsp;&nbsp;}<br>&nbsp;}<br>});<br><br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: dataSource,<br>&nbsp;dataTextField: "FullName"<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function dataSource ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dataSource" => $dataAX );
      
      if ( is_array ( $dataAX[ 'dataSource' ] ) )
      {
        parent::addData ( "dataSource", $dataAX[ 'dataSource' ] );
        unset ( $dataAX[ 'dataSource' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dataSource' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::dataSource ( \$data[ 'dataSource' ] type must be 'Object' | 'Array' | 'kendo.data.HierarchicalDataSource'" );
      }
      
    }
    
    
    /**
     * Sets the field of the data item that provides the sprite CSS class of the nodes. If an array, each level uses the field that is at the same index in the array, or the last item in the array.
     * @var $dataAX[ 'dataSpriteCssClassField' ]: ( String ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-dataSpriteCssClassField
     * 
     * @code
       &lt;style&gt;<br>&nbsp;#treeview .k-sprite {<br>&nbsp;&nbsp;background-image: url("http://demos.telerik.com/kendo-ui/content/web/treeview/coloricons-sprite.png");<br>&nbsp;}<br><br>&nbsp;.folder { background-position: 0 -16px; }<br>&nbsp;.html { background-position: 0 -48px; }<br>&lt;/style&gt;<br><br>&lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>var items = [<br>&nbsp;{ text: "assets", sprite: "folder" },<br>&nbsp;{ text: "index.html", sprite: "html" }<br>];<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSpriteCssClassField: "sprite",<br>&nbsp;dataSource: items<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function dataSpriteCssClassField ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dataSpriteCssClassField" => $dataAX );
      
      if ( is_string ( $dataAX[ 'dataSpriteCssClassField' ] ) )
      {
        parent::addData ( "dataSpriteCssClassField", $dataAX[ 'dataSpriteCssClassField' ] );
        unset ( $dataAX[ 'dataSpriteCssClassField' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dataSpriteCssClassField' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::dataSpriteCssClassField ( \$data[ 'dataSpriteCssClassField' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Sets the field of the data item that provides the text content of the nodes. If an array, each level uses the field that is at the same index in the array, or the last item in the array.
     * @var $dataAX[ 'dataTextField' ]: ( String | Array ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-dataTextField
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>var items = [<br>&nbsp;{ ProductName: "Tea", items: [<br>&nbsp;&nbsp;{ ProductName: "Green Tea" },<br>&nbsp;&nbsp;{ ProductName: "Black Tea" }<br>&nbsp;] },<br>&nbsp;{ ProductName: "Coffee" }<br>];<br>$("#treeview").kendoTreeView({<br>&nbsp;dataTextField: "ProductName",<br>&nbsp;dataSource: items<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>var items = [<br>&nbsp;{ CategoryName: "Tea", items: [<br>&nbsp;&nbsp;{ ProductName: "Green Tea" },<br>&nbsp;&nbsp;{ ProductName: "Black Tea" }<br>&nbsp;] },<br>&nbsp;{ CategoryName: "Coffee" }<br>];<br>$("#treeview").kendoTreeView({<br>&nbsp;dataTextField: [ "CategoryName", "ProductName" ],<br>&nbsp;dataSource: items<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function dataTextField ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dataTextField" => $dataAX );
      
      if ( is_string ( $dataAX[ 'dataTextField' ] ) )
      {
        parent::addData ( "dataTextField", $dataAX[ 'dataTextField' ] );
        unset ( $dataAX[ 'dataTextField' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_array ( $dataAX[ 'dataTextField' ] ) )
      {
        parent::addData ( "dataTextField", $dataAX[ 'dataTextField' ] );
        unset ( $dataAX[ 'dataTextField' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dataTextField' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::dataTextField ( \$data[ 'dataTextField' ] type must be 'String' | 'Array'" );
      }
      
    }
    
    
    /**
     * Sets the field of the data item that provides the link URL of the nodes.
     * @var $dataAX[ 'dataUrlField' ]: ( String ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-dataUrlField
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>var items = [<br>&nbsp;{ text: "Tea", LinksTo: "http://tea.example.com" },<br>&nbsp;{ text: "Coffee", LinksTo: "http://coffee.example.com" }<br>];<br>$("#treeview").kendoTreeView({<br>&nbsp;dataUrlField: "LinksTo",<br>&nbsp;dataSource: items<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function dataUrlField ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dataUrlField" => $dataAX );
      
      if ( is_string ( $dataAX[ 'dataUrlField' ] ) )
      {
        parent::addData ( "dataUrlField", $dataAX[ 'dataUrlField' ] );
        unset ( $dataAX[ 'dataUrlField' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dataUrlField' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::dataUrlField ( \$data[ 'dataUrlField' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Disables (<strong>false</strong>) or enables (<strong>true</strong>) drag-and-drop of the nodes.
     * @var $dataAX[ 'dragAndDrop' ]: ( Boolean ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-dragAndDrop
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dragAndDrop: true,<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo" },<br>&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function dragAndDrop ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dragAndDrop" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'dragAndDrop' ] ) )
      {
        parent::addData ( "dragAndDrop", $dataAX[ 'dragAndDrop' ] );
        unset ( $dataAX[ 'dragAndDrop' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dragAndDrop' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::dragAndDrop ( \$data[ 'dragAndDrop' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Indicates whether the child DataSources should be fetched lazily when parent groups get expanded. Setting this to false causes all child DataSources to be loaded at initialization time.
     * Note: when initializing the widget from an array (rather than from a HierarchicalDataSource instance), this option defaults to false, rather than true.
     * 
     * ( ! ) Note: when initializing the widget from an array (rather than from a HierarchicalDataSource instance), this option defaults to false, rather than true.
     * @var $dataAX[ 'loadOnDemand' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-loadOnDemand
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;loadOnDemand: true,<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar" }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function loadOnDemand ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "loadOnDemand" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'loadOnDemand' ] ) )
      {
        parent::addData ( "loadOnDemand", $dataAX[ 'loadOnDemand' ] );
        unset ( $dataAX[ 'loadOnDemand' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'loadOnDemand' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::loadOnDemand ( \$data[ 'loadOnDemand' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * The text messages displayed in the widget. Use it to customize or localize the messages.
     * @var $dataAX[ 'messages' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-messages
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: {<br>&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;read: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// request always fails after 1s<br>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.error({});<br>&nbsp;&nbsp;&nbsp;&nbsp;}, 1000);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;messages: {<br>&nbsp;&nbsp;retry: "Wiederholen",<br>&nbsp;&nbsp;requestFailed: "Anforderung fehlgeschlagen.",<br>&nbsp;&nbsp;loading: "Laden..."<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * The text message shown while the root level items are loading.
     * @var $dataAX[ 'messages' ][ 'loading' ]: ( String ) ( default: "Loading..." )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-messages.loading
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: {<br>&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;read: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// request always fails after 1s<br>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.error({});<br>&nbsp;&nbsp;&nbsp;&nbsp;}, 1000);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;messages: {<br>&nbsp;&nbsp;loading: "Laden..."<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: {<br>&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;read: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// request always fails after 1s<br>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.error({});<br>&nbsp;&nbsp;&nbsp;&nbsp;}, 1000);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;messages: {<br>&nbsp;&nbsp;requestFailed: "Anforderung fehlgeschlagen."<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: {<br>&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;read: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// request always fails after 1s<br>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.error({});<br>&nbsp;&nbsp;&nbsp;&nbsp;}, 1000);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;messages: {<br>&nbsp;&nbsp;retry: "Wiederholen"<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * The text message shown when an error occurs while fetching the content.
     * @var $dataAX[ 'messages' ][ 'requestFailed' ]: ( String ) ( default: "Request failed." )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-messages.requestFailed
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: {<br>&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;read: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// request always fails after 1s<br>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.error({});<br>&nbsp;&nbsp;&nbsp;&nbsp;}, 1000);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;messages: {<br>&nbsp;&nbsp;loading: "Laden..."<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: {<br>&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;read: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// request always fails after 1s<br>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.error({});<br>&nbsp;&nbsp;&nbsp;&nbsp;}, 1000);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;messages: {<br>&nbsp;&nbsp;requestFailed: "Anforderung fehlgeschlagen."<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: {<br>&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;read: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// request always fails after 1s<br>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.error({});<br>&nbsp;&nbsp;&nbsp;&nbsp;}, 1000);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;messages: {<br>&nbsp;&nbsp;retry: "Wiederholen"<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * The text message shown in the retry button.
     * @var $dataAX[ 'messages' ][ 'retry' ]: ( String ) ( default: "Retry" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-messages.retry
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: {<br>&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;read: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// request always fails after 1s<br>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.error({});<br>&nbsp;&nbsp;&nbsp;&nbsp;}, 1000);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;messages: {<br>&nbsp;&nbsp;loading: "Laden..."<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: {<br>&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;read: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// request always fails after 1s<br>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.error({});<br>&nbsp;&nbsp;&nbsp;&nbsp;}, 1000);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;messages: {<br>&nbsp;&nbsp;requestFailed: "Anforderung fehlgeschlagen."<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;dataSource: {<br>&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;read: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// request always fails after 1s<br>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.error({});<br>&nbsp;&nbsp;&nbsp;&nbsp;}, 1000);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;},<br>&nbsp;messages: {<br>&nbsp;&nbsp;retry: "Wiederholen"<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function messages ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "messages" => $dataAX );
      
      if ( is_string ( $dataAX[ 'messages' ][ 'loading' ] ) )
      {
        parent::addData ( "messages.loading", $dataAX[ 'messages' ][ 'loading' ] );
        unset ( $dataAX[ 'messages' ][ 'loading' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'messages' ][ 'loading' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::messages ( \$data[ 'messages' ][ 'loading' ] type must be 'String'" );
      }
      
      if ( is_string ( $dataAX[ 'messages' ][ 'requestFailed' ] ) )
      {
        parent::addData ( "messages.requestFailed", $dataAX[ 'messages' ][ 'requestFailed' ] );
        unset ( $dataAX[ 'messages' ][ 'requestFailed' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'messages' ][ 'requestFailed' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::messages ( \$data[ 'messages' ][ 'requestFailed' ] type must be 'String'" );
      }
      
      if ( is_string ( $dataAX[ 'messages' ][ 'retry' ] ) )
      {
        parent::addData ( "messages.retry", $dataAX[ 'messages' ][ 'retry' ] );
        unset ( $dataAX[ 'messages' ][ 'retry' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'messages' ][ 'retry' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::messages ( \$data[ 'messages' ][ 'retry' ] type must be 'String'" );
      }
      
      if ( is_array ( $dataAX[ 'messages' ] ) )
      {
        parent::addData ( "messages", $dataAX[ 'messages' ] );
        unset ( $dataAX[ 'messages' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'messages' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::messages ( \$data[ 'messages' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * Template for rendering each node.
     * @var $dataAX[ 'template' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview#configuration-template
     * 
     * @code
       &lt;div id="treeview"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>$("#treeview").kendoTreeView({<br>&nbsp;template: "#= item.text # (#= item.inStock #)",<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ text: "foo", inStock: 7, items: [<br>&nbsp;&nbsp;&nbsp;{ text: "bar", inStock: 2 },<br>&nbsp;&nbsp;&nbsp;{ text: "baz", inStock: 5 }<br>&nbsp;&nbsp;] }<br>&nbsp;]<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function template ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "template" => $dataAX );
      
      if ( is_string ( $dataAX[ 'template' ] ) )
      {
        parent::addData ( "template", $dataAX[ 'template' ] );
        unset ( $dataAX[ 'template' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'template' ] ) )
      {
        throw new Exception ( "Type error - KendoUiTreeView::template ( \$data[ 'template' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
  }