<?php

  /**
   * Represents the Kendo UI MultiSelect widget. Inherits from Widget.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect
   * Important When dataTextField is defined, thedataValueField option also should be set.
   */
  class KendoUiMultiSelect extends javascript
  {
    private $outputCStr;
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ( $htmlIdAStr, $extraAStr )
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$htmlIdAStr}\" {$extraAStr}>";
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ( $htmlIdALStr, $jsVarALStr = null )
    {
      if ( !is_null ( $jsVarALStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$jsVarALStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$htmlIdALStr}\").KendoUiMultiSelect({\r\n";
      self::$mainJavaScriptCodeCStr .= self::toObject( javascript::$dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      self::$dataCArr = null;
    }
    
    /**
     * Configures the opening and closing animations of the suggestion popup. Setting the <b><u>animation</u></b> option to <b><u>false</u></b> will disable the opening and closing animations. As a result the suggestion popup will open and close instantly.
     * @var $dataAX[ 'animation' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-animation
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;animation: false<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;animation: {<br>&nbsp; close: {<br>&nbsp;&nbsp; effects: "fadeOut zoom:out",<br>&nbsp;&nbsp; duration: 300<br>&nbsp; },<br>&nbsp; open: {<br>&nbsp;&nbsp; effects: "fadeIn zoom:in",<br>&nbsp;&nbsp; duration: 300<br>&nbsp; }<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * @var $dataAX[ 'animation' ][ 'close' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-animation.close
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;animation: {<br>&nbsp; close: {<br>&nbsp;&nbsp; effects: "zoom:out",<br>&nbsp;&nbsp; duration: 300<br>&nbsp; }<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;animation: {<br>&nbsp; open: {<br>&nbsp;&nbsp; effects: "zoom:in",<br>&nbsp;&nbsp; duration: 300<br>&nbsp; }<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * The animation played when the suggestion popup is opened.
     * @var $dataAX[ 'animation' ][ 'open' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-animation.open
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;animation: {<br>&nbsp; close: {<br>&nbsp;&nbsp; effects: "zoom:out",<br>&nbsp;&nbsp; duration: 300<br>&nbsp; }<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;animation: {<br>&nbsp; open: {<br>&nbsp;&nbsp; effects: "zoom:in",<br>&nbsp;&nbsp; duration: 300<br>&nbsp; }<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * 
     * The effect(s) to use when playing the close animation. Multiple effects should be separated with a space.
     * <a href="/kendo-ui/api/framework/fx/common">Complete list of available animations</a>
     * @var $dataAX[ 'animation' ][ 'close' ][ 'effects' ]: ( String ) ( default: 100 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-animation.close.effects
     * 
     * The duration of the close animation in milliseconds.
     * @var $dataAX[ 'animation' ][ 'close' ][ 'duration' ]: ( Number ) ( default: 200 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-animation.close.duration
     * 
     * The effect(s) to use when playing the open animation. Multiple effects should be separated with a space.
     * <a href="/kendo-ui/api/framework/fx/common">Complete list of available animations</a>
     * @var $dataAX[ 'animation' ][ 'open' ][ 'effects' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-animation.open.effects
     * 
     * The duration of the open animation in milliseconds.
     * @var $dataAX[ 'animation' ][ 'open' ][ 'duration' ]: ( Number )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-animation.open.duration
     * @throws string type error
     */
    public function animation ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "animation" => $dataAX );
      
      if ( is_string ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] ) )
      {
        parent::addData ( "animation.close.effects", $dataAX[ 'animation' ][ 'close' ][ 'effects' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::animation ( \$data[ 'animation' ][ 'close' ][ 'effects' ] type must be 'String'" );
      }
      
      if ( is_numeric ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] ) )
      {
        parent::addData ( "animation.close.duration", $dataAX[ 'animation' ][ 'close' ][ 'duration' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::animation ( \$data[ 'animation' ][ 'close' ][ 'duration' ] type must be 'Number'" );
      }
      
      if ( is_string ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] ) )
      {
        parent::addData ( "animation.open.effects", $dataAX[ 'animation' ][ 'open' ][ 'effects' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::animation ( \$data[ 'animation' ][ 'open' ][ 'effects' ] type must be 'String'" );
      }
      
      if ( is_numeric ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] ) )
      {
        parent::addData ( "animation.open.duration", $dataAX[ 'animation' ][ 'open' ][ 'duration' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::animation ( \$data[ 'animation' ][ 'open' ][ 'duration' ] type must be 'Number'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ][ 'close' ] ) )
      {
        parent::addData ( "animation.close", $dataAX[ 'animation' ][ 'close' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::animation ( \$data[ 'animation' ][ 'close' ] type must be 'Object'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ][ 'open' ] ) )
      {
        parent::addData ( "animation.open", $dataAX[ 'animation' ][ 'open' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::animation ( \$data[ 'animation' ][ 'open' ] type must be 'Object'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ] ) )
      {
        parent::addData ( "animation", $dataAX[ 'animation' ] );
        unset ( $dataAX[ 'animation' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::animation ( \$data[ 'animation' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * Controls whether to bind the widget to the data source on initialization.
     * @var $dataAX[ 'autoBind' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-autoBind
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;&nbsp;autoBind: false<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function autoBind ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "autoBind" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'autoBind' ] ) )
      {
        parent::addData ( "autoBind", $dataAX[ 'autoBind' ] );
        unset ( $dataAX[ 'autoBind' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'autoBind' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::autoBind ( \$data[ 'autoBind' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Controls whether to close the widget suggestion list on item selection.
     * @var $dataAX[ 'autoClose' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-autoClose
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;&nbsp;autoClose: false<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function autoClose ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "autoClose" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'autoClose' ] ) )
      {
        parent::addData ( "autoClose", $dataAX[ 'autoClose' ] );
        unset ( $dataAX[ 'autoClose' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'autoClose' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::autoClose ( \$data[ 'autoClose' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * The data source of the widget which is used to display a list of values. Can be a JavaScript object which represents a valid data source configuration, a JavaScript array or an existing <a href="/kendo-ui/api/framework/datasource">kendo.data.DataSource</a> instance.
     * If the <b><u>dataSource</u></b> option is set to a JavaScript object or array the widget will initialize a new <a href="/kendo-ui/api/framework/datasource">kendo.data.DataSource</a> instance using that value as data source configuration.
     * If the <b><u>dataSource</u></b> option is an existing <a href="/kendo-ui/api/framework/datasource">kendo.data.DataSource</a> instance the widget will use that instance and will <strong>not</strong> initialize a new one.
     * @var $dataAX[ 'dataSource' ]: ( Object | Array | kendo.data.DataSource )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-dataSource
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;dataSource: {<br>&nbsp;&nbsp;data: ["One", "Two"]<br>&nbsp;}<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;select id="multiselect" multiple="multiple"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>var data = ["One", "Two"];<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;dataSource: data<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;select id="multiselect" multiple="multiple"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>var dataSource = new kendo.data.DataSource({<br>&nbsp;transport: {<br>&nbsp;&nbsp;read: {<br>&nbsp;&nbsp;&nbsp;url: "http://demos.telerik.com/kendo-ui/service/products",<br>&nbsp;&nbsp;&nbsp;dataType: "jsonp"<br>&nbsp;&nbsp;}<br>&nbsp;}<br>});<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;dataSource: dataSource,<br>&nbsp;dataTextField: "ProductName",<br>&nbsp;dataValueField: "ProductID"<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function dataSource ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dataSource" => $dataAX );
      
      if ( is_array ( $dataAX[ 'dataSource' ] ) )
      {
        parent::addData ( "dataSource", $dataAX[ 'dataSource' ] );
        unset ( $dataAX[ 'dataSource' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dataSource' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::dataSource ( \$data[ 'dataSource' ] type must be 'Object' | 'Array' | 'kendo.data.DataSource'" );
      }
      
    }
    
    
    /**
     * The field of the data item that provides the text content of the list items. The widget will filter the data source based on this field.
     * <strong>Important</strong> When <code>dataTextField</code> is defined, the<code>dataValueField</code> option also should be set.
     * 
     * ( ! ) <strong>Important</strong> When <b><u>dataTextField</u></b> is defined, the<b><u>dataValueField</u></b> option also should be set.
     * @var $dataAX[ 'dataTextField' ]: ( String ) ( default: "" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-dataTextField
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;&nbsp;dataSource: [<br>&nbsp;&nbsp;&nbsp;&nbsp;{ Name: "Parent1", Id: 1 },<br>&nbsp;&nbsp;&nbsp;&nbsp;{ Name: "Parent2", Id: 2 }<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;dataTextField: "Name",<br>&nbsp;&nbsp;dataValueField: "Id"<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function dataTextField ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dataTextField" => $dataAX );
      
      if ( is_string ( $dataAX[ 'dataTextField' ] ) )
      {
        parent::addData ( "dataTextField", $dataAX[ 'dataTextField' ] );
        unset ( $dataAX[ 'dataTextField' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dataTextField' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::dataTextField ( \$data[ 'dataTextField' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The field of the data item that provides the value of the widget.
     * <strong>Important</strong> When <code>dataValueField</code> is defined, the<code>dataTextField</code> option also should be set.
     * 
     * ( ! ) <strong>Important</strong> When <b><u>dataValueField</u></b> is defined, the<b><u>dataTextField</u></b> option also should be set.
     * @var $dataAX[ 'dataValueField' ]: ( String ) ( default: "" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-dataValueField
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;&nbsp;dataSource: [{<br>&nbsp;&nbsp;&nbsp;&nbsp;{ Name: "Parent1", Id: 1 },<br>&nbsp;&nbsp;&nbsp;&nbsp;{ Name: "Parent2", Id: 2 }<br>&nbsp;&nbsp;}]<br>&nbsp;&nbsp;dataTextField: "Name",<br>&nbsp;&nbsp;dataValueField: "Id"<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function dataValueField ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dataValueField" => $dataAX );
      
      if ( is_string ( $dataAX[ 'dataValueField' ] ) )
      {
        parent::addData ( "dataValueField", $dataAX[ 'dataValueField' ] );
        unset ( $dataAX[ 'dataValueField' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dataValueField' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::dataValueField ( \$data[ 'dataValueField' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the delay in milliseconds after which the MultiSelect will start filtering dataSource.
     * @var $dataAX[ 'delay' ]: ( Number ) ( default: 200 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-delay
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;&nbsp;delay: 1000 // wait 1 second before clearing the user input<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function delay ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "delay" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'delay' ] ) )
      {
        parent::addData ( "delay", $dataAX[ 'delay' ] );
        unset ( $dataAX[ 'delay' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'delay' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::delay ( \$data[ 'delay' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * If set to <b><u>false</u></b> the widget will be disabled and will not allow user input. The widget is enabled by default and allows user input.
     * @var $dataAX[ 'enable' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-enable
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;enable: false<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function enable ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "enable" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'enable' ] ) )
      {
        parent::addData ( "enable", $dataAX[ 'enable' ] );
        unset ( $dataAX[ 'enable' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'enable' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::enable ( \$data[ 'enable' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * The filtering method used to determine the suggestions for the current value. Filtration is turned of by default. The supported filter values are <b><u>startswith</u></b>, <b><u>endswith</u></b> and <b><u>contains</u></b>.
     * @var $dataAX[ 'filter' ]: ( String ) ( default: "startswith" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-filter
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;filter: "contains"<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function filter ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "filter" => $dataAX );
      
      if ( is_string ( $dataAX[ 'filter' ] ) )
      {
        parent::addData ( "filter", $dataAX[ 'filter' ] );
        unset ( $dataAX[ 'filter' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'filter' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::filter ( \$data[ 'filter' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> used to render the fixed header group. By default the widget displays only the value of the current group.
     * @var $dataAX[ 'fixedGroupTemplate' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-fixedGroupTemplate
     * 
     * @code
       &lt;select id="customers" style="width: 400px;"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>&nbsp;&nbsp;$(document).ready(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;$("#customers").kendoMultiSelect({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;placeholder: "Select customers...",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataTextField: "ContactName",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataValueField: "CustomerID",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fixedGroupTemplate: "Fixed header: #: data #",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 400,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: "odata",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Customers"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group: { field: "Country" }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function fixedGroupTemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "fixedGroupTemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'fixedGroupTemplate' ] ) )
      {
        parent::addData ( "fixedGroupTemplate", $dataAX[ 'fixedGroupTemplate' ] );
        unset ( $dataAX[ 'fixedGroupTemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'fixedGroupTemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::fixedGroupTemplate ( \$data[ 'fixedGroupTemplate' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> used to render the groups. By default the widget displays only the value of the group.
     * @var $dataAX[ 'groupTemplate' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-groupTemplate
     * 
     * @code
       &lt;select id="customers" style="width: 400px;"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>&nbsp;&nbsp;$(document).ready(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;$("#customers").kendoMultiSelect({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;placeholder: "Select customers...",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataTextField: "ContactName",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataValueField: "CustomerID",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;groupTemplate: "Group template: #: data #",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 400,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: "odata",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Customers"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group: { field: "Country" }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function groupTemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "groupTemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'groupTemplate' ] ) )
      {
        parent::addData ( "groupTemplate", $dataAX[ 'groupTemplate' ] );
        unset ( $dataAX[ 'groupTemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'groupTemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::groupTemplate ( \$data[ 'groupTemplate' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
    /**
     * The height of the suggestion popup in pixels. The default value is 200 pixels.
     * @var $dataAX[ 'height' ]: ( Number ) ( default: 200 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-height
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;height: 500<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function height ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "height" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'height' ] ) )
      {
        parent::addData ( "height", $dataAX[ 'height' ] );
        unset ( $dataAX[ 'height' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'height' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::height ( \$data[ 'height' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * If set to <b><u>true</u></b> the first suggestion will be automatically highlighted.
     * @var $dataAX[ 'highlightFirst' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-highlightFirst
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;highlightFirst: false<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function highlightFirst ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "highlightFirst" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'highlightFirst' ] ) )
      {
        parent::addData ( "highlightFirst", $dataAX[ 'highlightFirst' ] );
        unset ( $dataAX[ 'highlightFirst' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'highlightFirst' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::highlightFirst ( \$data[ 'highlightFirst' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * If set to <b><u>false</u></b> case-sensitive search will be performed to find suggestions. The widget performs case-insensitive searching by default.
     * @var $dataAX[ 'ignoreCase' ]: ( String ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-ignoreCase
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;ignoreCase: false<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function ignoreCase ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "ignoreCase" => $dataAX );
      
      if ( is_string ( $dataAX[ 'ignoreCase' ] ) )
      {
        parent::addData ( "ignoreCase", $dataAX[ 'ignoreCase' ] );
        unset ( $dataAX[ 'ignoreCase' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'ignoreCase' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::ignoreCase ( \$data[ 'ignoreCase' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The minimum number of characters the user must type before a search is performed. Set to a higher value if the search could match a lot of items. A zero value means that a request will be made as soon as the user focuses the widget.
     * Widget will initiate a request when input value is cleared. If you would like to prevent this behavior please check the <a href="#events-filtering">filtering</a> event for more details.
     * 
     * ( ! ) Widget will initiate a request when input value is cleared. If you would like to prevent this behavior please check the <a href="#events-filtering">filtering</a> event for more details.
     * @var $dataAX[ 'minLength' ]: ( Number ) ( default: 0 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-minLength
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;minLength: 3<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function minLength ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "minLength" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'minLength' ] ) )
      {
        parent::addData ( "minLength", $dataAX[ 'minLength' ] );
        unset ( $dataAX[ 'minLength' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'minLength' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::minLength ( \$data[ 'minLength' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * Defines the limit of the selected items. If set to null widget will not limit number of the selected items.
     * @var $dataAX[ 'maxSelectedItems' ]: ( Number ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-maxSelectedItems
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item3&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item4&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;&nbsp;maxSelectedItems: 3 //only three or less items could be selected<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function maxSelectedItems ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "maxSelectedItems" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'maxSelectedItems' ] ) )
      {
        parent::addData ( "maxSelectedItems", $dataAX[ 'maxSelectedItems' ] );
        unset ( $dataAX[ 'maxSelectedItems' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'maxSelectedItems' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::maxSelectedItems ( \$data[ 'maxSelectedItems' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * The hint displayed by the widget when it is empty. Not set by default.
     * @var $dataAX[ 'placeholder' ]: ( String ) ( default: "" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-placeholder
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;placeholder: "Select..."<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;select id="multiselect data-placeholder="Select..." multiple="multiple"&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item1&lt;/option&gt;<br>&nbsp;&nbsp;&lt;option&gt;Item2&lt;/option&gt;<br>&lt;/select&gt;<br><br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect();<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function placeholder ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "placeholder" => $dataAX );
      
      if ( is_string ( $dataAX[ 'placeholder' ] ) )
      {
        parent::addData ( "placeholder", $dataAX[ 'placeholder' ] );
        unset ( $dataAX[ 'placeholder' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'placeholder' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::placeholder ( \$data[ 'placeholder' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies a static HTML content, which will be rendered as a header of the popup element.
     * <strong>Important</strong> Widget does not pass a model data to the header template. Use this option only with static HTML.
     * 
     * ( ! ) <strong>Important</strong> Widget does not pass a model data to the header template. Use this option only with static HTML.
     * @var $dataAX[ 'headerTemplate' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-headerTemplate
     * 
     * @code
       &lt;select id="multiselect"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ id: 1, name: "Apples" },<br>&nbsp;&nbsp;{ id: 2, name: "Oranges" }<br>&nbsp;],<br>&nbsp;dataTextField: "name",<br>&nbsp;dataValueField: "id",<br>&nbsp;headerTemplate: '&lt;div&gt;&lt;h2&gt;Fruits&lt;/h2&gt;&lt;/div&gt;'<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function headerTemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "headerTemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'headerTemplate' ] ) )
      {
        parent::addData ( "headerTemplate", $dataAX[ 'headerTemplate' ] );
        unset ( $dataAX[ 'headerTemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'headerTemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::headerTemplate ( \$data[ 'headerTemplate' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> used to render the items in the popup list.
     * @var $dataAX[ 'itemTemplate' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-itemTemplate
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;&lt;/select&gt;<br>&lt;script id="itemTemplate" type="text/x-kendo-template"&gt;<br>&nbsp;&lt;span&gt;<br>&nbsp;&nbsp;&lt;img src="/img/#: id #.png" alt="#: name #" /&gt;<br>&nbsp;&nbsp;#: name #<br>&nbsp;&lt;/span&gt;<br>&lt;/script&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ id: 1, name: "Apples" },<br>&nbsp;&nbsp;{ id: 2, name: "Oranges" }<br>&nbsp;],<br>&nbsp;dataTextField: "name",<br>&nbsp;dataValueField: "id",<br>&nbsp;itemTemplate: kendo.template($("#itemTemplate").html())<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;select id="multiselect" multiple="multiple"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ id: 1, name: "Apples" },<br>&nbsp;&nbsp;{ id: 2, name: "Oranges" }<br>&nbsp;],<br>&nbsp;dataTextField: "name",<br>&nbsp;dataValueField: "id",<br>&nbsp;itemTemplate: '&lt;span&gt;&lt;img src="/img/#: id #.png" alt="#: name #" /&gt;#: name #&lt;/span&gt;'<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function itemTemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "itemTemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'itemTemplate' ] ) )
      {
        parent::addData ( "itemTemplate", $dataAX[ 'itemTemplate' ] );
        unset ( $dataAX[ 'itemTemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'itemTemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::itemTemplate ( \$data[ 'itemTemplate' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> used to render the tags.
     * The dataitem that corresponds to the selected value.
     * A list of the selected values.
     * A list of the selected data items.
     * The current dataSource total value. If it is server filtered, it will show the current length of the <a href="/kendo-ui/api/javascript/data/datasource#methods-view">view</a>.
     * The maximum total value of the dataSource. Unlike the <b><u>currentTotal</u></b>, this value will keep the maximum reached total value. Usable when the tag shows the total of the available items.
     * @var $dataAX[ 'tagTemplate' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-tagTemplate
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;&lt;/select&gt;<br>&lt;script id="tagTemplate" type="text/x-kendo-template"&gt;<br>&nbsp;&lt;span&gt;<br>&nbsp;&nbsp;&lt;img src="/img/#: id #.png" alt="#: name #" /&gt;<br>&nbsp;&nbsp;#: name #<br>&nbsp;&lt;/span&gt;<br>&lt;/script&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ id: 1, name: "Apples" },<br>&nbsp;&nbsp;{ id: 2, name: "Oranges" }<br>&nbsp;],<br>&nbsp;dataTextField: "name",<br>&nbsp;dataValueField: "id",<br>&nbsp;tagTemplate: kendo.template($("#tagTemplate").html())<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;select id="multiselect" multiple="multiple"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ id: 1, name: "Apples" },<br>&nbsp;&nbsp;{ id: 2, name: "Oranges" }<br>&nbsp;],<br>&nbsp;dataTextField: "name",<br>&nbsp;dataValueField: "id",<br>&nbsp;tagTemplate: '&lt;span&gt;&lt;img src="/img/#: id #.png" alt="#: name #" /&gt;#: name #&lt;/span&gt;'<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;select id="multiselect" multiple="multiple"&gt;&lt;/select&gt;<br>&lt;script id="tagTemplate" type="text/x-kendo-template"&gt;<br>&nbsp;&nbsp;# if (values.length &lt; 3) { #<br>&nbsp;&nbsp;&nbsp;&nbsp;# for (var idx = 0; idx &lt; values.length; idx++) { #<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#:values[idx]#<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# if (idx &lt; values.length - 1) {#, # } #<br>&nbsp;&nbsp;&nbsp;&nbsp;# } #<br>&nbsp;&nbsp;# } else { #<br>&nbsp;&nbsp;&nbsp; #:values.length# out of #:maxTotal#<br>&nbsp;&nbsp;# } #<br>&lt;/script&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;dataSource: [<br>&nbsp;&nbsp;{ id: 1, name: "Apples" },<br>&nbsp;&nbsp;{ id: 2, name: "Oranges" },<br>&nbsp;&nbsp;{ id: 2, name: "Bananas" }<br>&nbsp;],<br>&nbsp;dataTextField: "name",<br>&nbsp;dataValueField: "id",<br>&nbsp;tagTemplate: kendo.template($("#tagTemplate").html())<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function tagTemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "tagTemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'tagTemplate' ] ) )
      {
        parent::addData ( "tagTemplate", $dataAX[ 'tagTemplate' ] );
        unset ( $dataAX[ 'tagTemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tagTemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::tagTemplate ( \$data[ 'tagTemplate' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The mode used to render the selected tags. The available modes are:
     * Every tagMode has a specific <code>tagTemplate</code> value. If you would like to control the content of the rendered tags,
set a custom a <a href="#configuration-tagTemplate">tagTemplate</a> value.
     * 
     * ( ! ) Every tagMode has a specific <b><u>tagTemplate</u></b> value. If you would like to control the content of the rendered tags,
     * set a custom a <a href="#configuration-tagTemplate">tagTemplate</a> value.
     * @var $dataAX[ 'tagMode' ]: ( String ) ( default: "multiple" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-tagMode
     * @throws string type error
     */
    public function tagMode ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "tagMode" => $dataAX );
      
      if ( is_string ( $dataAX[ 'tagMode' ] ) )
      {
        parent::addData ( "tagMode", $dataAX[ 'tagMode' ] );
        unset ( $dataAX[ 'tagMode' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tagMode' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::tagMode ( \$data[ 'tagMode' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Define the value of the widget
     * <strong>Important:</strong> Define a list of data items if widget is not initially bound
     * 
     * ( ! ) <strong>Important:</strong> Define a list of data items if widget is not initially bound
     * @var $dataAX[ 'value' ]: ( Array ) ( default: [] )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-value
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;&nbsp; dataSource: ["Item1", "Item2", "Item3", "Item4"],<br>&nbsp;&nbsp; value: ["Item2", "Item3"]<br>});<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;select id="multiselect" multiple="multiple"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;&nbsp;autoBind: false,<br>&nbsp;&nbsp;dataTextField: "productName",<br>&nbsp;&nbsp;dataValueField: "productId",<br>&nbsp;&nbsp;value: [{ productName: "Item 1", productId: "1" }, { productName: "Item 2", productId: "2" }]<br>});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function value ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "value" => $dataAX );
      
      if ( is_array ( $dataAX[ 'value' ] ) )
      {
        parent::addData ( "value", $dataAX[ 'value' ] );
        unset ( $dataAX[ 'value' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'value' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::value ( \$data[ 'value' ] type must be 'Array'" );
      }
      
    }
    
    
    /**
     * Specifies the <a href="/kendo-ui/framework/mvvm/bindings/value">value binding</a> behavior for the widget. If set to true, the View-Model field will be updated with the selected item value field. If set to false, the View-Model field will be updated with the selected item.
     * @var $dataAX[ 'valuePrimitive' ]: ( Boolean ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-valuePrimitive
     * 
     * @code
       &lt;select id="multiselect" multiple="multiple" data-bind="value: values, source: products"&gt;&lt;/select&gt;<br><br>&lt;script&gt;<br>$("#multiselect").kendoMultiSelect({<br>&nbsp;valuePrimitive: true,<br>&nbsp;dataTextField: "name",<br>&nbsp;dataValueField: "id"<br>});<br>var viewModel = kendo.observable({<br>&nbsp;selectedProductId: [],<br>&nbsp;products: [<br>&nbsp;&nbsp;{ id: 1, name: "Coffee" },<br>&nbsp;&nbsp;{ id: 2, name: "Tea" },<br>&nbsp;&nbsp;{ id: 3, name: "Juice" }<br>&nbsp;]<br>});<br><br>kendo.bind($("#multiselect"), viewModel);<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function valuePrimitive ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "valuePrimitive" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'valuePrimitive' ] ) )
      {
        parent::addData ( "valuePrimitive", $dataAX[ 'valuePrimitive' ] );
        unset ( $dataAX[ 'valuePrimitive' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'valuePrimitive' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::valuePrimitive ( \$data[ 'valuePrimitive' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Enables the virtualization feature of the widget.
     * @var $dataAX[ 'virtual' ]: ( Boolean | Object ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-virtual
     * 
     * @code
       &lt;select id="orders" style="width: 400px;"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>&nbsp;&nbsp;$(document).ready(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;$("#orders").kendoMultiSelect({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;placeholder: "Select addresses...",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataTextField: "ShipName",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataValueField: "OrderID",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 520,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;virtual: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itemHeight: 26,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueMapper: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url: "http://demos.telerik.com/kendo-ui/service/Orders/ValueMapper",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: "GET",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data: convertValues(options.value),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success: function (data) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.success(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: "odata",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Orders"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schema: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fields: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderID: { type: "number" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Freight: { type: "number" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShipName: { type: "string" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderDate: { type: "date" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShipCity: { type: "string" }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pageSize: 80,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serverPaging: true,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serverFiltering: true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;});<br><br>&nbsp;&nbsp;function convertValues(value) {<br>&nbsp;&nbsp;&nbsp;&nbsp;var data = {};<br><br>&nbsp;&nbsp;&nbsp;&nbsp;value = $.isArray(value) ? value : [value];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;for (var idx = 0; idx &lt; value.length; idx++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data["values[" + idx + "]"] = value[idx];<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;return data;<br>&nbsp;&nbsp;}<br>&lt;/script&gt;
     * @endcode
     * 
     * Specifies the height of the virtual item. All items in the virtualized list <strong>must</strong> have the same height. If the developer does not specify one, the framework will automatically set <b><u>itemHeight</u></b> based on the current theme and font size.
     * @var $dataAX[ 'virtual' ][ 'itemHeight' ]: ( Number ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-virtual.itemHeight
     * 
     * @code
       &lt;select id="orders" style="width: 400px;"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>&nbsp;&nbsp;$(document).ready(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;$("#orders").kendoMultiSelect({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;placeholder: "Select addresses...",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataTextField: "ShipName",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataValueField: "OrderID",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 520,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;virtual: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itemHeight: 26,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueMapper: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url: "http://demos.telerik.com/kendo-ui/service/Orders/ValueMapper",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: "GET",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data: convertValues(options.value),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success: function (data) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//the **data** is either index or array of indices.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Example:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 10258 -&gt; 10 (index in the Orders collection)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// [10258, 10261] -&gt; [10, 14] (indices in the Orders collection)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.success(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: "odata",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Orders"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schema: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fields: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderID: { type: "number" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Freight: { type: "number" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShipName: { type: "string" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderDate: { type: "date" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShipCity: { type: "string" }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pageSize: 80,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serverPaging: true,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serverFiltering: true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;});<br><br>&nbsp;&nbsp;function convertValues(value) {<br>&nbsp;&nbsp;&nbsp;&nbsp;var data = {};<br><br>&nbsp;&nbsp;&nbsp;&nbsp;value = $.isArray(value) ? value : [value];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;for (var idx = 0; idx &lt; value.length; idx++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data["values[" + idx + "]"] = value[idx];<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;return data;<br>&nbsp;&nbsp;}<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;select id="orders" style="width: 400px;"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>&nbsp;&nbsp;$(document).ready(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;$("#orders").kendoMultiSelect({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;placeholder: "Select addresses...",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataTextField: "ShipName",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataValueField: "OrderID",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 520,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;virtual: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itemHeight: 26,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueMapper: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url: "http://demos.telerik.com/kendo-ui/service/Orders/ValueMapper",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: "GET",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data: convertValues(options.value),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success: function (data) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.success(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: "odata",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Orders"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schema: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fields: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderID: { type: "number" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Freight: { type: "number" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShipName: { type: "string" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderDate: { type: "date" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShipCity: { type: "string" }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pageSize: 80,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serverPaging: true,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serverFiltering: true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;});<br><br>&nbsp;&nbsp;function convertValues(value) {<br>&nbsp;&nbsp;&nbsp;&nbsp;var data = {};<br><br>&nbsp;&nbsp;&nbsp;&nbsp;value = $.isArray(value) ? value : [value];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;for (var idx = 0; idx &lt; value.length; idx++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data["values[" + idx + "]"] = value[idx];<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;return data;<br>&nbsp;&nbsp;}<br>&lt;/script&gt;
     * @endcode
     * 
     * The <b><u>valueMapper</u></b> function is <strong>mandatory</strong> for the functionality of the virtualized widget. The widget calls the <b><u>valueMapper</u></b> function when the widget receives a value, that is not fetched from the remote server yet. The widget will pass the selected value(s) in the <b><u>valueMapper</u></b> function. In turn, the <b><u>valueMapper</u></b> implementation should return the <strong>respective data item(s) index/indices</strong>.
     * @var $dataAX[ 'virtual' ][ 'valueMapper' ]: ( Function ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/multiselect#configuration-virtual.valueMapper
     * 
     * @code
       &lt;select id="orders" style="width: 400px;"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>&nbsp;&nbsp;$(document).ready(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;$("#orders").kendoMultiSelect({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;placeholder: "Select addresses...",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataTextField: "ShipName",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataValueField: "OrderID",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 520,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;virtual: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itemHeight: 26,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueMapper: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url: "http://demos.telerik.com/kendo-ui/service/Orders/ValueMapper",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: "GET",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data: convertValues(options.value),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success: function (data) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//the **data** is either index or array of indices.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Example:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 10258 -&gt; 10 (index in the Orders collection)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// [10258, 10261] -&gt; [10, 14] (indices in the Orders collection)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.success(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: "odata",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Orders"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schema: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fields: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderID: { type: "number" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Freight: { type: "number" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShipName: { type: "string" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderDate: { type: "date" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShipCity: { type: "string" }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pageSize: 80,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serverPaging: true,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serverFiltering: true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;});<br><br>&nbsp;&nbsp;function convertValues(value) {<br>&nbsp;&nbsp;&nbsp;&nbsp;var data = {};<br><br>&nbsp;&nbsp;&nbsp;&nbsp;value = $.isArray(value) ? value : [value];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;for (var idx = 0; idx &lt; value.length; idx++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data["values[" + idx + "]"] = value[idx];<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;return data;<br>&nbsp;&nbsp;}<br>&lt;/script&gt;
     * @endcode
     * @code
        &lt;select id="orders" style="width: 400px;"&gt;&lt;/select&gt;<br>&lt;script&gt;<br>&nbsp;&nbsp;$(document).ready(function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;$("#orders").kendoMultiSelect({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;placeholder: "Select addresses...",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataTextField: "ShipName",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataValueField: "OrderID",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 520,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;virtual: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itemHeight: 26,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueMapper: function(options) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url: "http://demos.telerik.com/kendo-ui/service/Orders/ValueMapper",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: "GET",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data: convertValues(options.value),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success: function (data) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.success(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSource: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: "odata",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transport: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Orders"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schema: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fields: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderID: { type: "number" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Freight: { type: "number" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShipName: { type: "string" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OrderDate: { type: "date" },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShipCity: { type: "string" }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pageSize: 80,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serverPaging: true,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;serverFiltering: true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;});<br><br>&nbsp;&nbsp;function convertValues(value) {<br>&nbsp;&nbsp;&nbsp;&nbsp;var data = {};<br><br>&nbsp;&nbsp;&nbsp;&nbsp;value = $.isArray(value) ? value : [value];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;for (var idx = 0; idx &lt; value.length; idx++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data["values[" + idx + "]"] = value[idx];<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;return data;<br>&nbsp;&nbsp;}<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function virtual ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "virtual" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'virtual' ][ 'itemHeight' ] ) )
      {
        parent::addData ( "virtual.itemHeight", $dataAX[ 'virtual' ][ 'itemHeight' ] );
        unset ( $dataAX[ 'virtual' ][ 'itemHeight' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'virtual' ][ 'itemHeight' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::virtual ( \$data[ 'virtual' ][ 'itemHeight' ] type must be 'Number'" );
      }
      
      if ( is_string ( $dataAX[ 'virtual' ][ 'valueMapper' ] ) )
      {
        parent::addData ( "virtual.valueMapper", $dataAX[ 'virtual' ][ 'valueMapper' ] );
        unset ( $dataAX[ 'virtual' ][ 'valueMapper' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'virtual' ][ 'valueMapper' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::virtual ( \$data[ 'virtual' ][ 'valueMapper' ] type must be 'Function'" );
      }
      
      if ( is_bool ( $dataAX[ 'virtual' ] ) )
      {
        parent::addData ( "virtual", $dataAX[ 'virtual' ] );
        unset ( $dataAX[ 'virtual' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_array ( $dataAX[ 'virtual' ] ) )
      {
        parent::addData ( "virtual", $dataAX[ 'virtual' ] );
        unset ( $dataAX[ 'virtual' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'virtual' ] ) )
      {
        throw new Exception ( "Type error - KendoUiMultiSelect::virtual ( \$data[ 'virtual' ] type must be 'Boolean' | 'Object'" );
      }
      
    }
    
    
  }