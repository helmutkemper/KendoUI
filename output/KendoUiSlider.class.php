<?php

  /**
   * Represents the Kendo UI Slider widget. Inherits from Widget.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/slider
   * 
   */
  class KendoUiSlider extends javascript
  {
    private $outputCStr;
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ( $htmlIdAStr, $extraAStr )
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$htmlIdAStr}\" {$extraAStr}>";
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ( $htmlIdALStr, $jsVarALStr = null )
    {
      if ( !is_null ( $jsVarALStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$jsVarALStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$htmlIdALStr}\").KendoUiSlider({\r\n";
      self::$mainJavaScriptCodeCStr .= self::toObject( javascript::$dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      self::$dataCArr = null;
    }
    
    /**
     * The title of the decrease button of the <strong>Slider</strong>.
     * @var $dataAX[ 'decreaseButtonTitle' ]: ( String ) ( default: "Decrease" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-decreaseButtonTitle
     * @throws string type error
     */
    public function decreaseButtonTitle ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "decreaseButtonTitle" => $dataAX );
      
      if ( is_string ( $dataAX[ 'decreaseButtonTitle' ] ) )
      {
        parent::addData ( "decreaseButtonTitle", $dataAX[ 'decreaseButtonTitle' ] );
        unset ( $dataAX[ 'decreaseButtonTitle' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'decreaseButtonTitle' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::decreaseButtonTitle ( \$data[ 'decreaseButtonTitle' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The title of the increase button of the <strong>Slider</strong>.
     * @var $dataAX[ 'increaseButtonTitle' ]: ( String ) ( default: "Increase" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-increaseButtonTitle
     * @throws string type error
     */
    public function increaseButtonTitle ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "increaseButtonTitle" => $dataAX );
      
      if ( is_string ( $dataAX[ 'increaseButtonTitle' ] ) )
      {
        parent::addData ( "increaseButtonTitle", $dataAX[ 'increaseButtonTitle' ] );
        unset ( $dataAX[ 'increaseButtonTitle' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'increaseButtonTitle' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::increaseButtonTitle ( \$data[ 'increaseButtonTitle' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The delta with which the value will change when the user presses the Page Up or Page Down key (the drag handle must be focused). Note: The allied <b><u>largeStep</u></b> will also set large tick for every large step.
     * @var $dataAX[ 'largeStep' ]: ( Number ) ( default: 5 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-largeStep
     * @throws string type error
     */
    public function largeStep ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "largeStep" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'largeStep' ] ) )
      {
        parent::addData ( "largeStep", $dataAX[ 'largeStep' ] );
        unset ( $dataAX[ 'largeStep' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'largeStep' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::largeStep ( \$data[ 'largeStep' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * The maximum value of the <strong>Slider</strong>.
     * @var $dataAX[ 'max' ]: ( Number ) ( default: 10 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-max
     * @throws string type error
     */
    public function max ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "max" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'max' ] ) )
      {
        parent::addData ( "max", $dataAX[ 'max' ] );
        unset ( $dataAX[ 'max' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'max' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::max ( \$data[ 'max' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * The minimum value of the <strong>Slider</strong>.
     * @var $dataAX[ 'min' ]: ( Number ) ( default: 0 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-min
     * @throws string type error
     */
    public function min ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "min" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'min' ] ) )
      {
        parent::addData ( "min", $dataAX[ 'min' ] );
        unset ( $dataAX[ 'min' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'min' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::min ( \$data[ 'min' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * The orientation of a <strong>Slider</strong>: <strong>"horizontal"</strong> or <strong>"vertical"</strong>.
     * @var $dataAX[ 'orientation' ]: ( String ) ( default: "horizontal" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-orientation
     * @throws string type error
     */
    public function orientation ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "orientation" => $dataAX );
      
      if ( is_string ( $dataAX[ 'orientation' ] ) )
      {
        parent::addData ( "orientation", $dataAX[ 'orientation' ] );
        unset ( $dataAX[ 'orientation' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'orientation' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::orientation ( \$data[ 'orientation' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Can be used to show (<strong>true</strong>) or hide (<strong>false</strong>) the increase and decrease buttons of a <strong>Slider</strong>.
     * @var $dataAX[ 'showButtons' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-showButtons
     * @throws string type error
     */
    public function showButtons ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "showButtons" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'showButtons' ] ) )
      {
        parent::addData ( "showButtons", $dataAX[ 'showButtons' ] );
        unset ( $dataAX[ 'showButtons' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'showButtons' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::showButtons ( \$data[ 'showButtons' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * The small step value of the <strong>Slider</strong>. The underlying value will be changed when the end user (1) clicks on the increase or decrease buttons of the <strong>Slider</strong>, (2) presses the arrow keys (the drag handle must be focused), or (3) drags the drag handle.
     * @var $dataAX[ 'smallStep' ]: ( Number ) ( default: 1 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-smallStep
     * @throws string type error
     */
    public function smallStep ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "smallStep" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'smallStep' ] ) )
      {
        parent::addData ( "smallStep", $dataAX[ 'smallStep' ] );
        unset ( $dataAX[ 'smallStep' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'smallStep' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::smallStep ( \$data[ 'smallStep' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * Denotes the location of the tick marks in the <strong>Slider</strong>. The available options are:
     * Tick marks are located on the top of the horizontal widget or on the left of the vertical widget.
     * Tick marks are located on the bottom of the horizontal widget or on the right side of the vertical widget.
     * <b>"both"</b> - Tick marks are located on both sides of the widget.
     * <b>"none"</b> - Tick marks are not visible.
     * @var $dataAX[ 'tickPlacement' ]: ( String ) ( default: "both" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-tickPlacement
     * @throws string type error
     */
    public function tickPlacement ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "tickPlacement" => $dataAX );
      
      if ( is_string ( $dataAX[ 'tickPlacement' ] ) )
      {
        parent::addData ( "tickPlacement", $dataAX[ 'tickPlacement' ] );
        unset ( $dataAX[ 'tickPlacement' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tickPlacement' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::tickPlacement ( \$data[ 'tickPlacement' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Configuration of the <strong>Slider</strong> tooltip.
     * @var $dataAX[ 'tooltip' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-tooltip
     * 
     * Disables (<strong>false</strong>) or enables (<strong>true</strong>) the tooltip of the <strong>Slider</strong>.
     * @var $dataAX[ 'tooltip' ][ 'enabled' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-tooltip.enabled
     * 
     * @code
       &lt;div id="rangeslider" class="humidity"&gt;<br>&nbsp;&lt;input /&gt;<br>&nbsp;&lt;input /&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>&nbsp;// the following template definitions are identical and represent the default RangeSlider template<br><br>&nbsp;var templateString = "#= selectionStart # - #= selectionEnd #";<br>&nbsp;// or<br>&nbsp;// var templateString = "# return selectionStart&nbsp;+ ' - ' + selectionEnd #";<br><br>&nbsp;$("#rangeslider").kendoRangeSlider({<br>&nbsp;&nbsp;min: 0,<br>&nbsp;&nbsp;max: 100,<br>&nbsp;&nbsp;tooltip: {<br>&nbsp;&nbsp;&nbsp;template: kendo.template(templateString)<br>&nbsp;&nbsp;}<br>&nbsp;});<br>&lt;/script&gt;
     * @endcode
     * 
     * Format string for the text of the tooltip. Note: The applied format will also influence the appearance of the <strong>Slider</strong> tick labels.
     * @var $dataAX[ 'tooltip' ][ 'format' ]: ( String ) ( default: "{0}" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-tooltip.format
     * 
     * @code
       &lt;div id="rangeslider" class="humidity"&gt;<br>&nbsp;&lt;input /&gt;<br>&nbsp;&lt;input /&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>&nbsp;// the following template definitions are identical and represent the default RangeSlider template<br><br>&nbsp;var templateString = "#= selectionStart # - #= selectionEnd #";<br>&nbsp;// or<br>&nbsp;// var templateString = "# return selectionStart&nbsp;+ ' - ' + selectionEnd #";<br><br>&nbsp;$("#rangeslider").kendoRangeSlider({<br>&nbsp;&nbsp;min: 0,<br>&nbsp;&nbsp;max: 100,<br>&nbsp;&nbsp;tooltip: {<br>&nbsp;&nbsp;&nbsp;template: kendo.template(templateString)<br>&nbsp;&nbsp;}<br>&nbsp;});<br>&lt;/script&gt;
     * @endcode
     * 
     * Template of the tooltip. The following variables are passed by the Slider and are ready to be used inside the template:
     * @var $dataAX[ 'tooltip' ][ 'template' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-tooltip.template
     * 
     * @code
       &lt;div id="rangeslider" class="humidity"&gt;<br>&nbsp;&lt;input /&gt;<br>&nbsp;&lt;input /&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>&nbsp;// the following template definitions are identical and represent the default RangeSlider template<br><br>&nbsp;var templateString = "#= selectionStart # - #= selectionEnd #";<br>&nbsp;// or<br>&nbsp;// var templateString = "# return selectionStart&nbsp;+ ' - ' + selectionEnd #";<br><br>&nbsp;$("#rangeslider").kendoRangeSlider({<br>&nbsp;&nbsp;min: 0,<br>&nbsp;&nbsp;max: 100,<br>&nbsp;&nbsp;tooltip: {<br>&nbsp;&nbsp;&nbsp;template: kendo.template(templateString)<br>&nbsp;&nbsp;}<br>&nbsp;});<br>&lt;/script&gt;
     * @endcode
     * @throws string type error
     */
    public function tooltip ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "tooltip" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'tooltip' ][ 'enabled' ] ) )
      {
        parent::addData ( "tooltip.enabled", $dataAX[ 'tooltip' ][ 'enabled' ] );
        unset ( $dataAX[ 'tooltip' ][ 'enabled' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tooltip' ][ 'enabled' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::tooltip ( \$data[ 'tooltip' ][ 'enabled' ] type must be 'Boolean'" );
      }
      
      if ( is_string ( $dataAX[ 'tooltip' ][ 'format' ] ) )
      {
        parent::addData ( "tooltip.format", $dataAX[ 'tooltip' ][ 'format' ] );
        unset ( $dataAX[ 'tooltip' ][ 'format' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tooltip' ][ 'format' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::tooltip ( \$data[ 'tooltip' ][ 'format' ] type must be 'String'" );
      }
      
      if ( is_string ( $dataAX[ 'tooltip' ][ 'template' ] ) )
      {
        parent::addData ( "tooltip.template", $dataAX[ 'tooltip' ][ 'template' ] );
        unset ( $dataAX[ 'tooltip' ][ 'template' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tooltip' ][ 'template' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::tooltip ( \$data[ 'tooltip' ][ 'template' ] type must be 'String'" );
      }
      
      if ( is_array ( $dataAX[ 'tooltip' ] ) )
      {
        parent::addData ( "tooltip", $dataAX[ 'tooltip' ] );
        unset ( $dataAX[ 'tooltip' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tooltip' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::tooltip ( \$data[ 'tooltip' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * The underlying value of the <strong>Slider</strong>.
     * @var $dataAX[ 'value' ]: ( Number )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/slider#configuration-value
     * @throws string type error
     */
    public function value ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "value" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'value' ] ) )
      {
        parent::addData ( "value", $dataAX[ 'value' ] );
        unset ( $dataAX[ 'value' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'value' ] ) )
      {
        throw new Exception ( "Type error - KendoUiSlider::value ( \$data[ 'value' ] type must be 'Number'" );
      }
      
    }
    
    
  }