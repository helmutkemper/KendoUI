<?php

  /**
   * Represents the Kendo UI DatePicker widget. Inherits from Widget.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker
   * Note the option will not be applied if start option is lower than depth. Always set both and start and depth options.
   */
  class KendoUiDatePicker extends javascript
  {
    private $outputCStr;
    private $idElementCStr;
    private $nameVarCStr;
    private $htmlTagExtraCStr;
    
    function __construct ( $idElementAStr, $nameVarAStr = null, $htmlTagExtraAStr = null )
    {
      $this->idElementCStr = $idElementAStr;
      $this->nameVarCStr = $nameVarAStr;
      $this->htmlTagExtraCStr = $htmlTagExtraAStr;
    }
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ()
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$this->idElementCStr}\" {$this->htmlTagExtraCStr}>";
      return self::$mainHtmlCodeCStr;
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ()
    {
      if ( !is_null ( $this->nameVarCStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$this->nameVarCStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$this->idElementCStr}\").KendoUiDatePicker({";
      self::$mainJavaScriptCodeCStr .= $this->toObject( $this->dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      $this->dataCArr = null;
      return self::$mainJavaScriptCodeCStr;
    }
    
    /**
     * Configures the opening and closing animations of the calendar popup. Setting the <b><u>animation</u></b> option to <b><u>false</u></b> will disable the opening and closing animations. As a result the calendar popup will open and close instantly.
     * @var $dataAX[ 'animation' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-animation
     * 
     * @code
       Example - disable open and close animations
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
          animation: false
        });
        </script>
     * @endcode
     * @code
        Example - configure the animation
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
          animation: {
           close: {
             effects: "fadeOut zoom:out",
             duration: 300
           },
           open: {
             effects: "fadeIn zoom:in",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * 
     * The animation played when the calendar popup is closed.
     * @var $dataAX[ 'animation' ][ 'close' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-animation.close
     * 
     * @code
       Example - configure the close animation
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
          animation: {
           close: {
             effects: "zoom:out",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * @code
        Example - configure the open animation
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
          animation: {
           open: {
             effects: "zoom:in",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * 
     * The animation played when the calendar popup is opened.
     * @var $dataAX[ 'animation' ][ 'open' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-animation.open
     * 
     * @code
       Example - configure the close animation
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
          animation: {
           close: {
             effects: "zoom:out",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * @code
        Example - configure the open animation
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
          animation: {
           open: {
             effects: "zoom:in",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * 
     * The effect(s) to use when playing the close animation. Multiple effects should be separated with a space.
     * <a href="/kendo-ui/api/framework/fx/common">Complete list of available animations</a>
     * @var $dataAX[ 'animation' ][ 'close' ][ 'effects' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-animation.close.effects
     * 
     * The duration of the close animation in milliseconds.
     * @var $dataAX[ 'animation' ][ 'close' ][ 'duration' ]: ( Number )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-animation.close.duration
     * 
     * The effect(s) to use when playing the open animation. Multiple effects should be separated with a space.
     * <a href="/kendo-ui/api/framework/fx/common">Complete list of available animations</a>
     * @var $dataAX[ 'animation' ][ 'open' ][ 'effects' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-animation.open.effects
     * 
     * The duration of the open animation in milliseconds.
     * @var $dataAX[ 'animation' ][ 'open' ][ 'duration' ]: ( Number )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-animation.open.duration
     * @throws string type error
     */
    public function animation ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "animation" => $dataAX );
      
      if ( is_string ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] ) )
      {
        parent::addData ( "animation.close.effects", $dataAX[ 'animation' ][ 'close' ][ 'effects' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::animation ( \$data[ 'animation' ][ 'close' ][ 'effects' ] type must be 'String'" );
      }
      
      if ( is_numeric ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] ) )
      {
        parent::addData ( "animation.close.duration", $dataAX[ 'animation' ][ 'close' ][ 'duration' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::animation ( \$data[ 'animation' ][ 'close' ][ 'duration' ] type must be 'Number'" );
      }
      
      if ( is_string ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] ) )
      {
        parent::addData ( "animation.open.effects", $dataAX[ 'animation' ][ 'open' ][ 'effects' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::animation ( \$data[ 'animation' ][ 'open' ][ 'effects' ] type must be 'String'" );
      }
      
      if ( is_numeric ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] ) )
      {
        parent::addData ( "animation.open.duration", $dataAX[ 'animation' ][ 'open' ][ 'duration' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::animation ( \$data[ 'animation' ][ 'open' ][ 'duration' ] type must be 'Number'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ][ 'close' ] ) )
      {
        parent::addData ( "animation.close", $dataAX[ 'animation' ][ 'close' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::animation ( \$data[ 'animation' ][ 'close' ] type must be 'Object'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ][ 'open' ] ) )
      {
        parent::addData ( "animation.open", $dataAX[ 'animation' ][ 'open' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::animation ( \$data[ 'animation' ][ 'open' ] type must be 'Object'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ] ) )
      {
        parent::addData ( "animation", $dataAX[ 'animation' ] );
        unset ( $dataAX[ 'animation' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::animation ( \$data[ 'animation' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * Specifies a template used to populate value of the aria-label attribute.
     * @var $dataAX[ 'ARIATemplate' ]: ( String ) ( default: "Current focused date is #=kendo.toString(data.current, 'D')#" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-ARIATemplate
     * 
     * @code
       Example
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
            ARIATemplate: "Date: #=kendo.toString(data.current, 'G')#"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function ARIATemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "ARIATemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'ARIATemplate' ] ) )
      {
        parent::addData ( "ARIATemplate", $dataAX[ 'ARIATemplate' ] );
        unset ( $dataAX[ 'ARIATemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'ARIATemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::ARIATemplate ( \$data[ 'ARIATemplate' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the culture info used by the widget.
     * @var $dataAX[ 'culture' ]: ( String ) ( default: "en-US" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-culture
     * 
     * @code
       Example - specify German culture internationalization
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
            culture: "de-DE"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function culture ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "culture" => $dataAX );
      
      if ( is_string ( $dataAX[ 'culture' ] ) )
      {
        parent::addData ( "culture", $dataAX[ 'culture' ] );
        unset ( $dataAX[ 'culture' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'culture' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::culture ( \$data[ 'culture' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies a list of dates, which will be passed to the month template.
     * @var $dataAX[ 'dates' ]: ( Array )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-dates
     * 
     * @code
       Example - specify a list of dates
        <input id="datepicker" />
        <script>
            $("#datepicker").kendoDatePicker({
                value: new Date(2000, 10, 1),
                dates: [
                    new Date(2000, 10, 10, 10, 0, 0),
                    new Date(2000, 10, 30)
                ] //can manipulate month template depending on this array.
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function dates ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dates" => $dataAX );
      
      if ( is_array ( $dataAX[ 'dates' ] ) )
      {
        parent::addData ( "dates", $dataAX[ 'dates' ] );
        unset ( $dataAX[ 'dates' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dates' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::dates ( \$data[ 'dates' ] type must be 'Array'" );
      }
      
    }
    
    
    /**
     * Specifies the navigation depth. The following settings are available for the <strong>depth</strong> value:
     * <b>"month"</b> - shows the days of the month
     * <b>"year"</b> - shows the months of the year
     * <b>"decade"</b> - shows the years of the decade
     * <b>"century"</b> - shows the decades from the century
     * Note the option will not be applied if <strong>start</strong> option is <em>lower</em> than <strong>depth</strong>. Always set both and <strong>start</strong> and <strong>depth</strong> options.
     * 
     * ( ! ) Note the option will not be applied if <strong>start</strong> option is <em>lower</em> than <strong>depth</strong>. Always set both and <strong>start</strong> and <strong>depth</strong> options.
     * @var $dataAX[ 'depth' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-depth
     * 
     * @code
       "month"

shows the days of the month

"year"

shows the months of the year

"decade"

shows the years of the decade

"century"

shows the decades from the century


Note the option will not be applied if start option is lower than depth. Always set both and start and depth options.


Example - set navigation depth of the calendar popup
        <input id="datepicker"/>
        <script>
        $("#datepicker").kendoDatePicker({
            depth: "year"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function depth ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "depth" => $dataAX );
      
      if ( is_string ( $dataAX[ 'depth' ] ) )
      {
        parent::addData ( "depth", $dataAX[ 'depth' ] );
        unset ( $dataAX[ 'depth' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'depth' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::depth ( \$data[ 'depth' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> which renders the footer of the calendar. If false, the footer will not be rendered.
     * @var $dataAX[ 'footer' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-footer
     * 
     * @code
       Example - specify footer template as a function
        <input id="datepicker" />
        <script id="footer-template" type="text/x-kendo-template">
            Today - #: kendo.toString(data, "d") #
        </script>
        <script>
        $("#datepicker").kendoDatePicker({
            footer: kendo.template($("#footer-template").html())
        });
        </script>
     * @endcode
     * @code
        Example - specify footer template as a string
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
            footer: "Today - #: kendo.toString(data, 'd') #"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function footer ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "footer" => $dataAX );
      
      if ( is_string ( $dataAX[ 'footer' ] ) )
      {
        parent::addData ( "footer", $dataAX[ 'footer' ] );
        unset ( $dataAX[ 'footer' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'footer' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::footer ( \$data[ 'footer' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
    /**
     * Specifies the format, which is used to format the value of the DatePicker displayed in the input. The format also will be used to parse the input.
     * @var $dataAX[ 'format' ]: ( String ) ( default: "MM/dd/yyyy" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-format
     * 
     * @code
       Example - specify a custom date format
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
            format: "yyyy/MM/dd"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function format ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "format" => $dataAX );
      
      if ( is_string ( $dataAX[ 'format' ] ) )
      {
        parent::addData ( "format", $dataAX[ 'format' ] );
        unset ( $dataAX[ 'format' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'format' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::format ( \$data[ 'format' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the maximum date, which the calendar can show.
     * @var $dataAX[ 'max' ]: ( Date ) ( default: Date(2099, 11, 31) )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-max
     * 
     * @code
       Example - specify the maximum date
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
            max: new Date(2013, 0, 1) // sets max date to Jan 1st, 2013
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function max ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "max" => $dataAX );
      
      if ( is_array ( $dataAX[ 'max' ] ) )
      {
        $dateAsString = "";
        if ( isset ( $dataAX[ 'max' ][ "Year" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Year" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Month" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Month" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Day" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Day" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Hour" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Hour" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Minute" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Minute" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Second" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Second" ]}";
        }
        $dateAsString = "new Date ({$dateAsString});";
        parent::addData ( "max", $dateAsString );
        unset ( $dataAX[ 'max' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'max' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::max ( \$data[ 'max' ] type must be 'Date'" );
      }
      
    }
    
    
    /**
     * Specifies the minimum date that the calendar can show.
     * @var $dataAX[ 'min' ]: ( Date ) ( default: Date(1900, 0, 1) )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-min
     * 
     * @code
       Example - specify the minimum date
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
            min: new Date(2011, 0, 1) // sets min date to Jan 1st, 2011
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function min ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "min" => $dataAX );
      
      if ( is_array ( $dataAX[ 'min' ] ) )
      {
        $dateAsString = "";
        if ( isset ( $dataAX[ 'min' ][ "Year" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Year" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Month" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Month" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Day" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Day" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Hour" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Hour" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Minute" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Minute" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Second" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Second" ]}";
        }
        $dateAsString = "new Date ({$dateAsString});";
        parent::addData ( "min", $dateAsString );
        unset ( $dataAX[ 'min' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'min' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::min ( \$data[ 'min' ] type must be 'Date'" );
      }
      
    }
    
    
    /**
     * Templates for the cells rendered in the calendar "month" view.
     * @var $dataAX[ 'month' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-month
     * 
     * The template to be used for rendering the cells in "month" view, which are between the min/max range.
     * @var $dataAX[ 'month' ][ 'content' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-month.content
     * 
     * @code
       Example - specify cell template as a string
        <input id="datepicker" />
        <script id="cell-template" type="text/x-kendo-template">
            <div class="#= data.value < 10 ? 'exhibition' : 'party' #"></div>
            #= data.value #
        </script>
        <script>
        $("#datepicker").kendoDatePicker({
            month: {
               content: $("#cell-template").html()
            }
        });
        </script>
     * @endcode
     * @code
        Example - specify an empty cell template as a string
        <input id="datepicker1" />
        <script>
        $("#datepicker1").kendoDatePicker({
            month: {
               empty: '-'
            }
        });
        </script>
     * @endcode
     * @code
        Example - add date value to the out-of-range cells
        <input id="datepicker2" />
        <script>
        $("#datepicker2").kendoDatePicker({
            month: {
               empty: '<span style="color:\\\\#ccc;padding:0 .45em 0 .1em;">#= data.value #</span>'
            }
        });
        </script>
     * @endcode
     * 
     * The template used for rendering cells in the "month" view, which are outside the min/max range.
     * @var $dataAX[ 'month' ][ 'empty' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-month.empty
     * 
     * @code
       Example - specify cell template as a string
        <input id="datepicker" />
        <script id="cell-template" type="text/x-kendo-template">
            <div class="#= data.value < 10 ? 'exhibition' : 'party' #"></div>
            #= data.value #
        </script>
        <script>
        $("#datepicker").kendoDatePicker({
            month: {
               content: $("#cell-template").html()
            }
        });
        </script>
     * @endcode
     * @code
        Example - specify an empty cell template as a string
        <input id="datepicker1" />
        <script>
        $("#datepicker1").kendoDatePicker({
            month: {
               empty: '-'
            }
        });
        </script>
     * @endcode
     * @code
        Example - add date value to the out-of-range cells
        <input id="datepicker2" />
        <script>
        $("#datepicker2").kendoDatePicker({
            month: {
               empty: '<span style="color:\\\\#ccc;padding:0 .45em 0 .1em;">#= data.value #</span>'
            }
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function month ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "month" => $dataAX );
      
      if ( is_string ( $dataAX[ 'month' ][ 'content' ] ) )
      {
        parent::addData ( "month.content", $dataAX[ 'month' ][ 'content' ] );
        unset ( $dataAX[ 'month' ][ 'content' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'month' ][ 'content' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::month ( \$data[ 'month' ][ 'content' ] type must be 'String'" );
      }
      
      if ( is_string ( $dataAX[ 'month' ][ 'empty' ] ) )
      {
        parent::addData ( "month.empty", $dataAX[ 'month' ][ 'empty' ] );
        unset ( $dataAX[ 'month' ][ 'empty' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'month' ][ 'empty' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::month ( \$data[ 'month' ][ 'empty' ] type must be 'String'" );
      }
      
      if ( is_array ( $dataAX[ 'month' ] ) )
      {
        parent::addData ( "month", $dataAX[ 'month' ] );
        unset ( $dataAX[ 'month' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'month' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::month ( \$data[ 'month' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * Specifies a list of date formats used to parse the value set with <b><u>value()</u></b> method or by direct user input. If not set the value of the format will be used. Note that the <b><u>format</u></b> option is always used during parsing.
     * The order of the provided parse formats is important and it should go from more strict to less strict.
     * 
     * ( ! ) The order of the provided parse formats is important and it should go from more strict to less strict.
     * @var $dataAX[ 'parseFormats' ]: ( Array )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-parseFormats
     * 
     * @code
       Example
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
            format: "yyyy/MM/dd",
            parseFormats: ["MMMM yyyy"] //format also will be added to parseFormats
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function parseFormats ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "parseFormats" => $dataAX );
      
      if ( is_array ( $dataAX[ 'parseFormats' ] ) )
      {
        parent::addData ( "parseFormats", $dataAX[ 'parseFormats' ] );
        unset ( $dataAX[ 'parseFormats' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'parseFormats' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::parseFormats ( \$data[ 'parseFormats' ] type must be 'Array'" );
      }
      
    }
    
    
    /**
     * Specifies the start view. The following settings are available for the <strong>start</strong> value:
     * <b>"month"</b> - shows the days of the month
     * <b>"year"</b> - shows the months of the year
     * <b>"decade"</b> - shows the years of the decade
     * <b>"century"</b> - shows the decades from the century
     * @var $dataAX[ 'start' ]: ( String ) ( default: "month" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-start
     * 
     * @code
       "month"

shows the days of the month

"year"

shows the months of the year

"decade"

shows the years of the decade

"century"

shows the decades from the century

Example - specify the initial view, which calendar renders
        <input id="datepicker" />
        <script>
            $("#datepicker").kendoDatePicker({
                start: "year"
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function start ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "start" => $dataAX );
      
      if ( is_string ( $dataAX[ 'start' ] ) )
      {
        parent::addData ( "start", $dataAX[ 'start' ] );
        unset ( $dataAX[ 'start' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'start' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::start ( \$data[ 'start' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the selected date.
     * @var $dataAX[ 'value' ]: ( Date ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datepicker#configuration-value
     * 
     * @code
       Example
        <input id="datepicker" />
        <script>
        $("#datepicker").kendoDatePicker({
            value: new Date(2011, 0, 1)
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function value ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "value" => $dataAX );
      
      if ( is_array ( $dataAX[ 'value' ] ) )
      {
        $dateAsString = "";
        if ( isset ( $dataAX[ 'value' ][ "Year" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Year" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Month" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Month" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Day" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Day" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Hour" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Hour" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Minute" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Minute" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Second" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Second" ]}";
        }
        $dateAsString = "new Date ({$dateAsString});";
        parent::addData ( "value", $dateAsString );
        unset ( $dataAX[ 'value' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'value' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDatePicker::value ( \$data[ 'value' ] type must be 'Date'" );
      }
      
    }
    
    
  }