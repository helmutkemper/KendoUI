<?php

  /**
   * Represents the Kendo UI DateTimePicker widget. Inherits from Widget.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker
   * Note the option will not be applied if start option is lower than depth. Always set both and start and depth options.
   */
  class KendoUiDateTimePicker extends javascript
  {
    private $outputCStr;
    private $idElementCStr;
    private $nameVarCStr;
    private $htmlTagExtraCStr;
    
    function __construct ( $idElementAStr, $nameVarAStr = null, $htmlTagExtraAStr = null )
    {
      $this->idElementCStr = $idElementAStr;
      $this->nameVarCStr = $nameVarAStr;
      $this->htmlTagExtraCStr = $htmlTagExtraAStr;
    }
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ()
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$this->idElementCStr}\" {$this->htmlTagExtraCStr}>";
      return self::$mainHtmlCodeCStr;
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ()
    {
      if ( !is_null ( $this->nameVarCStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$this->nameVarCStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$this->idElementCStr}\").KendoUiDateTimePicker({";
      self::$mainJavaScriptCodeCStr .= $this->toObject( $this->dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      $this->dataCArr = null;
      return self::$mainJavaScriptCodeCStr;
    }
    
    /**
     * Configures the opening and closing animations of the popups. Setting the <b><u>animation</u></b> option to <b><u>false</u></b> will disable the opening and closing animations. As a result the popup will open and close instantly.
     * @var $dataAX[ 'animation' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-animation
     * 
     * @code
       Example - disable open and close animations
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
          animation: false
        });
        </script>
     * @endcode
     * @code
        Example - configure the animation
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
          animation: {
           close: {
             effects: "fadeOut zoom:out",
             duration: 300
           },
           open: {
             effects: "fadeIn zoom:in",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * 
     * The animation played when a popup is closed.
     * @var $dataAX[ 'animation' ][ 'close' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-animation.close
     * 
     * @code
       Example - configure the close animation
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
          animation: {
           close: {
             effects: "zoom:out",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * @code
        Example - configure the open animation
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
          animation: {
           open: {
             effects: "zoom:in",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * 
     * The animation played when the popup is opened.
     * @var $dataAX[ 'animation' ][ 'open' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-animation.open
     * 
     * @code
       Example - configure the close animation
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
          animation: {
           close: {
             effects: "zoom:out",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * @code
        Example - configure the open animation
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
          animation: {
           open: {
             effects: "zoom:in",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * 
     * The effect(s) to use when playing the close animation. Multiple effects should be separated with a space.
     * <a href="/kendo-ui/api/framework/fx/common">Complete list of available animations</a>
     * @var $dataAX[ 'animation' ][ 'close' ][ 'effects' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-animation.close.effects
     * 
     * The duration of the close animation in milliseconds.
     * @var $dataAX[ 'animation' ][ 'close' ][ 'duration' ]: ( Number )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-animation.close.duration
     * 
     * The effect(s) to use when playing the open animation. Multiple effects should be separated with a space.
     * <a href="/kendo-ui/api/framework/fx/common">Complete list of available animations</a>
     * @var $dataAX[ 'animation' ][ 'open' ][ 'effects' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-animation.open.effects
     * 
     * The duration of the open animation in milliseconds.
     * @var $dataAX[ 'animation' ][ 'open' ][ 'duration' ]: ( Number )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-animation.open.duration
     * @throws string type error
     */
    public function animation ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "animation" => $dataAX );
      
      if ( is_string ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] ) )
      {
        parent::addData ( "animation.close.effects", $dataAX[ 'animation' ][ 'close' ][ 'effects' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::animation ( \$data[ 'animation' ][ 'close' ][ 'effects' ] type must be 'String'" );
      }
      
      if ( is_numeric ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] ) )
      {
        parent::addData ( "animation.close.duration", $dataAX[ 'animation' ][ 'close' ][ 'duration' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::animation ( \$data[ 'animation' ][ 'close' ][ 'duration' ] type must be 'Number'" );
      }
      
      if ( is_string ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] ) )
      {
        parent::addData ( "animation.open.effects", $dataAX[ 'animation' ][ 'open' ][ 'effects' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::animation ( \$data[ 'animation' ][ 'open' ][ 'effects' ] type must be 'String'" );
      }
      
      if ( is_numeric ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] ) )
      {
        parent::addData ( "animation.open.duration", $dataAX[ 'animation' ][ 'open' ][ 'duration' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::animation ( \$data[ 'animation' ][ 'open' ][ 'duration' ] type must be 'Number'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ][ 'close' ] ) )
      {
        parent::addData ( "animation.close", $dataAX[ 'animation' ][ 'close' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::animation ( \$data[ 'animation' ][ 'close' ] type must be 'Object'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ][ 'open' ] ) )
      {
        parent::addData ( "animation.open", $dataAX[ 'animation' ][ 'open' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::animation ( \$data[ 'animation' ][ 'open' ] type must be 'Object'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ] ) )
      {
        parent::addData ( "animation", $dataAX[ 'animation' ] );
        unset ( $dataAX[ 'animation' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::animation ( \$data[ 'animation' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * Specifies a template used to populate value of the aria-label attribute.
     * @var $dataAX[ 'ARIATemplate' ]: ( String ) ( default: "Current focused date is #=kendo.toString(data.current, 'G')#" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-ARIATemplate
     * 
     * @code
       Example
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            ARIATemplate: "Date: #=kendo.toString(data.current, 'G')#"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function ARIATemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "ARIATemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'ARIATemplate' ] ) )
      {
        parent::addData ( "ARIATemplate", $dataAX[ 'ARIATemplate' ] );
        unset ( $dataAX[ 'ARIATemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'ARIATemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::ARIATemplate ( \$data[ 'ARIATemplate' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the culture info used by the widget.
     * @var $dataAX[ 'culture' ]: ( String ) ( default: "en-US" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-culture
     * 
     * @code
       Example - specify German culture internationalization
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            culture: "de-DE"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function culture ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "culture" => $dataAX );
      
      if ( is_string ( $dataAX[ 'culture' ] ) )
      {
        parent::addData ( "culture", $dataAX[ 'culture' ] );
        unset ( $dataAX[ 'culture' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'culture' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::culture ( \$data[ 'culture' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies a list of dates, which will be passed to the month template of the DateView. All dates, which match the date portion of the selected date will be used to re-bind the TimeView.
     * @var $dataAX[ 'dates' ]: ( Array )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-dates
     * 
     * @code
       Example - specify a list of dates
        <input id="datetimepicker" />
        <script>
            $("#datetimepicker").kendoDateTimePicker({
                value: new Date(2000, 10, 1),
                dates: [
                    new Date(2000, 10, 10, 10, 0, 0),
                    new Date(2000, 10, 12, 10, 30, 0)
                ] //can manipulate month template depending on this array.
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function dates ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dates" => $dataAX );
      
      if ( is_array ( $dataAX[ 'dates' ] ) )
      {
        parent::addData ( "dates", $dataAX[ 'dates' ] );
        unset ( $dataAX[ 'dates' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dates' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::dates ( \$data[ 'dates' ] type must be 'Array'" );
      }
      
    }
    
    
    /**
     * Specifies the navigation depth of the calendar. The following settings are available for the <strong>depth</strong> value:
     * Note the option will not be applied if <strong>start</strong> option is <em>lower</em> than <strong>depth</strong>. Always set both and <strong>start</strong> and <strong>depth</strong> options.
     * 
     * ( ! ) Note the option will not be applied if <strong>start</strong> option is <em>lower</em> than <strong>depth</strong>. Always set both and <strong>start</strong> and <strong>depth</strong> options.
     * @var $dataAX[ 'depth' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-depth
     * 
     * @code
       Example - set navigation depth of the calendar popup
        <input id="datetimepicker"/>
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            depth: "year"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function depth ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "depth" => $dataAX );
      
      if ( is_string ( $dataAX[ 'depth' ] ) )
      {
        parent::addData ( "depth", $dataAX[ 'depth' ] );
        unset ( $dataAX[ 'depth' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'depth' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::depth ( \$data[ 'depth' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> which renders the footer of the calendar. If false, the footer will not be rendered.
     * @var $dataAX[ 'footer' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-footer
     * 
     * @code
       Example - specify footer template as a function
        <input id="datetimepicker" />
        <script id="footer-template" type="text/x-kendo-template">
            Today - #: kendo.toString(data, "d") #
        </script>
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            footer: kendo.template($("#footer-template").html())
        });
        </script>
     * @endcode
     * @code
        Example - specify footer template as a string
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            footer: "Today - #: kendo.toString(data, 'd') #"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function footer ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "footer" => $dataAX );
      
      if ( is_string ( $dataAX[ 'footer' ] ) )
      {
        parent::addData ( "footer", $dataAX[ 'footer' ] );
        unset ( $dataAX[ 'footer' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'footer' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::footer ( \$data[ 'footer' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the format, which is used to format the value of the DateTimePicker displayed in the input. The format also will be used to parse the input.
     * @var $dataAX[ 'format' ]: ( String ) ( default: "MM/dd/yyyy h:mm tt" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-format
     * 
     * @code
       Example - specify a custom date format
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            format: "yyyy/MM/dd hh:mm tt"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function format ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "format" => $dataAX );
      
      if ( is_string ( $dataAX[ 'format' ] ) )
      {
        parent::addData ( "format", $dataAX[ 'format' ] );
        unset ( $dataAX[ 'format' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'format' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::format ( \$data[ 'format' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the interval, between values in the popup list, in minutes.
     * @var $dataAX[ 'interval' ]: ( Number ) ( default: 30 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-interval
     * 
     * @code
       Example - specify a time interval
        <input id="dateTimePicker" />
        <script>
        $("#dateTimePicker").kendoDateTimePicker({
            interval: 15
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function interval ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "interval" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'interval' ] ) )
      {
        parent::addData ( "interval", $dataAX[ 'interval' ] );
        unset ( $dataAX[ 'interval' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'interval' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::interval ( \$data[ 'interval' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * Specifies the maximum date, which the calendar can show.
     * @var $dataAX[ 'max' ]: ( Date ) ( default: Date(2099, 11, 31) )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-max
     * 
     * @code
       Example - specify the maximum date
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            max: new Date(2013, 0, 1, 22, 0, 0)
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function max ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "max" => $dataAX );
      
      if ( is_array ( $dataAX[ 'max' ] ) )
      {
        $dateAsString = "";
        if ( isset ( $dataAX[ 'max' ][ "Year" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Year" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Month" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Month" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Day" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Day" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Hour" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Hour" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Minute" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Minute" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Second" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Second" ]}";
        }
        $dateAsString = "new Date ({$dateAsString});";
        parent::addData ( "max", $dateAsString );
        unset ( $dataAX[ 'max' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'max' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::max ( \$data[ 'max' ] type must be 'Date'" );
      }
      
    }
    
    
    /**
     * Specifies the minimum date that the calendar can show.
     * @var $dataAX[ 'min' ]: ( Date ) ( default: Date(1900, 0, 1) )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-min
     * 
     * @code
       Example - specify the minimum date
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            min: new Date(2011, 0, 1, 8, 0, 0)
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function min ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "min" => $dataAX );
      
      if ( is_array ( $dataAX[ 'min' ] ) )
      {
        $dateAsString = "";
        if ( isset ( $dataAX[ 'min' ][ "Year" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Year" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Month" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Month" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Day" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Day" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Hour" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Hour" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Minute" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Minute" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Second" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Second" ]}";
        }
        $dateAsString = "new Date ({$dateAsString});";
        parent::addData ( "min", $dateAsString );
        unset ( $dataAX[ 'min' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'min' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::min ( \$data[ 'min' ] type must be 'Date'" );
      }
      
    }
    
    
    /**
     * Templates for the cells rendered in the calendar "month" view.
     * @var $dataAX[ 'month' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-month
     * 
     * Template to be used for rendering the cells in the calendar "month" view, which are in range.
     * @var $dataAX[ 'month' ][ 'content' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-month.content
     * 
     * @code
       Example - specify cell template as a string
        <input id="datetimepicker" />
        <script id="cell-template" type="text/x-kendo-template">
            <div class="#= data.value < 10 ? 'exhibition' : 'party' #"></div>
            #= data.value #
        </script>
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            month: {
               content: $("#cell-template").html()
            }
        });
        </script>
     * @endcode
     * @code
        Example - specify an empty cell template as a string
        <input id="datetimepicker1" />
        <script>
        $("#datetimepicker1").kendoDateTimePicker({
            month: {
               empty: '-'
            }
        });
        </script>
     * @endcode
     * @code
        Example - add date value to the out-of-range cells
        <input id="datetimepicker2" />
        <script>
        $("#datetimepicker2").kendoDateTimePicker({
            month: {
               empty: '<span style="color:\\\\#ccc;padding:0 .45em 0 .1em;">#= data.value #</span>'
            }
        });
        </script>
     * @endcode
     * 
     * The template used for rendering cells in the calendar "month" view, which are outside the min/max range.
     * @var $dataAX[ 'month' ][ 'empty' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-month.empty
     * 
     * @code
       Example - specify cell template as a string
        <input id="datetimepicker" />
        <script id="cell-template" type="text/x-kendo-template">
            <div class="#= data.value < 10 ? 'exhibition' : 'party' #"></div>
            #= data.value #
        </script>
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            month: {
               content: $("#cell-template").html()
            }
        });
        </script>
     * @endcode
     * @code
        Example - specify an empty cell template as a string
        <input id="datetimepicker1" />
        <script>
        $("#datetimepicker1").kendoDateTimePicker({
            month: {
               empty: '-'
            }
        });
        </script>
     * @endcode
     * @code
        Example - add date value to the out-of-range cells
        <input id="datetimepicker2" />
        <script>
        $("#datetimepicker2").kendoDateTimePicker({
            month: {
               empty: '<span style="color:\\\\#ccc;padding:0 .45em 0 .1em;">#= data.value #</span>'
            }
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function month ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "month" => $dataAX );
      
      if ( is_string ( $dataAX[ 'month' ][ 'content' ] ) )
      {
        parent::addData ( "month.content", $dataAX[ 'month' ][ 'content' ] );
        unset ( $dataAX[ 'month' ][ 'content' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'month' ][ 'content' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::month ( \$data[ 'month' ][ 'content' ] type must be 'String'" );
      }
      
      if ( is_string ( $dataAX[ 'month' ][ 'empty' ] ) )
      {
        parent::addData ( "month.empty", $dataAX[ 'month' ][ 'empty' ] );
        unset ( $dataAX[ 'month' ][ 'empty' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'month' ][ 'empty' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::month ( \$data[ 'month' ][ 'empty' ] type must be 'String'" );
      }
      
      if ( is_array ( $dataAX[ 'month' ] ) )
      {
        parent::addData ( "month", $dataAX[ 'month' ] );
        unset ( $dataAX[ 'month' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'month' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::month ( \$data[ 'month' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * Specifies the formats, which are used to parse the value set with value() method or by direct input. If not set the value of the <b><u>options.format</u></b> and <b><u>options.timeFormat</u></b> will be used. Note that value of the <b><u>format</u></b> option is always used. The <b><u>timeFormat</u></b> value also will be used if defined.
     * Order of the provided parse formats is important and it should from stricter to less strict.
     * 
     * ( ! ) Order of the provided parse formats is important and it should from stricter to less strict.
     * @var $dataAX[ 'parseFormats' ]: ( Array )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-parseFormats
     * 
     * @code
       Example
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            format: "yyyy/MM/dd hh:mm tt",
            parseFormats: ["MMMM yyyy", "HH:mm"] //format also will be added to parseFormats
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function parseFormats ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "parseFormats" => $dataAX );
      
      if ( is_array ( $dataAX[ 'parseFormats' ] ) )
      {
        parent::addData ( "parseFormats", $dataAX[ 'parseFormats' ] );
        unset ( $dataAX[ 'parseFormats' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'parseFormats' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::parseFormats ( \$data[ 'parseFormats' ] type must be 'Array'" );
      }
      
    }
    
    
    /**
     * Specifies the start view of the calendar. The following settings are available for the <strong>start</strong> value:
     * <b>"month"</b> - shows the days of the month
     * <b>"year"</b> - shows the months of the year
     * <b>"decade"</b> - shows the years of the decade
     * <b>"century"</b> - shows the decades from the century
     * @var $dataAX[ 'start' ]: ( String ) ( default: "month" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-start
     * 
     * @code
       "month"

shows the days of the month

"year"

shows the months of the year

"decade"

shows the years of the decade

"century"

shows the decades from the century

Example - specify the initial view, which calendar renders
        <input id="datetimepicker" />
        <script>
            $("#datetimepicker").kendoDateTimePicker({
                start: "year"
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function start ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "start" => $dataAX );
      
      if ( is_string ( $dataAX[ 'start' ] ) )
      {
        parent::addData ( "start", $dataAX[ 'start' ] );
        unset ( $dataAX[ 'start' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'start' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::start ( \$data[ 'start' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the format, which is used to format the values in the time drop-down list.
     * @var $dataAX[ 'timeFormat' ]: ( String ) ( default: "h:mm tt" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-timeFormat
     * 
     * @code
       Example
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            timeFormat: "HH:mm" //24 hours format
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function timeFormat ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "timeFormat" => $dataAX );
      
      if ( is_string ( $dataAX[ 'timeFormat' ] ) )
      {
        parent::addData ( "timeFormat", $dataAX[ 'timeFormat' ] );
        unset ( $dataAX[ 'timeFormat' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'timeFormat' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::timeFormat ( \$data[ 'timeFormat' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the selected value.
     * @var $dataAX[ 'value' ]: ( Date ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/datetimepicker#configuration-value
     * 
     * @code
       Example
        <input id="datetimepicker" />
        <script>
        $("#datetimepicker").kendoDateTimePicker({
            value: new Date(2011, 0, 1)
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function value ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "value" => $dataAX );
      
      if ( is_array ( $dataAX[ 'value' ] ) )
      {
        $dateAsString = "";
        if ( isset ( $dataAX[ 'value' ][ "Year" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Year" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Month" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Month" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Day" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Day" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Hour" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Hour" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Minute" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Minute" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Second" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Second" ]}";
        }
        $dateAsString = "new Date ({$dateAsString});";
        parent::addData ( "value", $dateAsString );
        unset ( $dataAX[ 'value' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'value' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDateTimePicker::value ( \$data[ 'value' ] type must be 'Date'" );
      }
      
    }
    
    
  }