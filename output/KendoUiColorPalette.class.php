<?php

  /**
   * This is the widget used by the color picker to display the simple,
   * web-safe, or a custom color palette.  You can use it independently if
   * you need such a widget directly in the page somewhere, rather than in
   * a drop-down.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpalette
   * This method does not trigger the "change" event.
   */
  class KendoUiColorPalette extends javascript
  {
    private $outputCStr;
    private $idElementCStr;
    private $nameVarCStr;
    private $htmlTagExtraCStr;
    
    function __construct ( $idElementAStr, $nameVarAStr = null, $htmlTagExtraAStr = null )
    {
      $this->idElementCStr = $idElementAStr;
      $this->nameVarCStr = $nameVarAStr;
      $this->htmlTagExtraCStr = $htmlTagExtraAStr;
    }
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ( $htmlIdAStr, $extraAStr )
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$htmlIdAStr}\" {$extraAStr}>";
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ()
    {
      if ( !is_null ( $this->nameVarCStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$this->nameVarCStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$this->idElementCStr}\").KendoUiColorPalette({";
      self::$mainJavaScriptCodeCStr .= $this->toObject( $this->dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      $this->dataCArr = null;
      return self::$mainJavaScriptCodeCStr;
    }
    
    /**
     * Specifies the color palette to display. It can be a string with comma-separated colors in hex representation, an array of <a href="/kendo-ui/api/framework/color"><b><u>kendo.Color</u></b> object</a> objects or of strings that <a href="/kendo-ui/api/framework/kendo#parseColor">parseColor</a> understands. As a shortcut, you can pass "basic" to get the simple palette (this is the default) or "websafe" to get the Web-safe palette.
     * @var $dataAX[ 'palette' ]: ( String | Array ) ( default: "basic" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpalette#configuration-palette
     * 
     * @code
       Example - use "websafe" palette
        <div id="palette"></div>
        <script>
        $("#palette").kendoColorPalette({
          palette: "websafe"
        });
        </script>
     * @endcode
     * @code
        Example - use list of colors
        <div id="palette"></div>
        <script>
        $("#palette").kendoColorPalette({
          palette: [ "#000", "#333", "#666", "#999", "#ccc", "#fff" ],
          columns: 6
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function palette ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "palette" => $dataAX );
      
      if ( is_string ( $dataAX[ 'palette' ] ) )
      {
        parent::addData ( "palette", $dataAX[ 'palette' ] );
        unset ( $dataAX[ 'palette' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_array ( $dataAX[ 'palette' ] ) )
      {
        parent::addData ( "palette", $dataAX[ 'palette' ] );
        unset ( $dataAX[ 'palette' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'palette' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPalette::palette ( \$data[ 'palette' ] type must be 'String' | 'Array'" );
      }
      
    }
    
    
    /**
     * The number of columns to display. When you use the "websafe" palette, this will automatically default to 18.
     * @var $dataAX[ 'columns' ]: ( Number ) ( default: 10 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpalette#configuration-columns
     * 
     * @code
       Example - wrap list of colors on two rows with 3 columns
        <div id="palette"></div>
        <script>
        $("#palette").kendoColorPalette({
          palette: [ "#000", "#333", "#666", "#999", "#ccc", "#fff" ],
          columns: 3
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function columns ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "columns" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'columns' ] ) )
      {
        parent::addData ( "columns", $dataAX[ 'columns' ] );
        unset ( $dataAX[ 'columns' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'columns' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPalette::columns ( \$data[ 'columns' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * The size of a color cell.
     * @var $dataAX[ 'tileSize' ]: ( Number | Object ) ( default: 14 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpalette#configuration-tileSize
     * 
     * @code
       Example
        <div id="palette"></div>
        <script>
        $("#palette").kendoColorPalette({
          palette: "basic",
          tileSize: 32
        });
        </script>
     * @endcode
     * 
     * The width of the color cell.
     * @var $dataAX[ 'tileSize' ][ 'width' ]: ( Number ) ( default: 14 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpalette#configuration-tileSize.width
     * 
     * @code
       Example
        <div id="palette"></div>
        <script>
        $("#palette").kendoColorPalette({
          palette: "basic",
          tileSize: { width: 40 }
        });
        </script>
     * @endcode
     * @code
        Example
        <div id="palette"></div>
        <script>
        $("#palette").kendoColorPalette({
          palette: "basic",
          tileSize: { height: 40 }
        });
        </script>
     * @endcode
     * 
     * The height of the color cell.
     * @var $dataAX[ 'tileSize' ][ 'height' ]: ( Number ) ( default: 14 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpalette#configuration-tileSize.height
     * 
     * @code
       Example
        <div id="palette"></div>
        <script>
        $("#palette").kendoColorPalette({
          palette: "basic",
          tileSize: { width: 40 }
        });
        </script>
     * @endcode
     * @code
        Example
        <div id="palette"></div>
        <script>
        $("#palette").kendoColorPalette({
          palette: "basic",
          tileSize: { height: 40 }
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function tileSize ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "tileSize" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'tileSize' ][ 'width' ] ) )
      {
        parent::addData ( "tileSize.width", $dataAX[ 'tileSize' ][ 'width' ] );
        unset ( $dataAX[ 'tileSize' ][ 'width' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tileSize' ][ 'width' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPalette::tileSize ( \$data[ 'tileSize' ][ 'width' ] type must be 'Number'" );
      }
      
      if ( is_numeric ( $dataAX[ 'tileSize' ][ 'height' ] ) )
      {
        parent::addData ( "tileSize.height", $dataAX[ 'tileSize' ][ 'height' ] );
        unset ( $dataAX[ 'tileSize' ][ 'height' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tileSize' ][ 'height' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPalette::tileSize ( \$data[ 'tileSize' ][ 'height' ] type must be 'Number'" );
      }
      
      if ( is_numeric ( $dataAX[ 'tileSize' ] ) )
      {
        parent::addData ( "tileSize", $dataAX[ 'tileSize' ] );
        unset ( $dataAX[ 'tileSize' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_array ( $dataAX[ 'tileSize' ] ) )
      {
        parent::addData ( "tileSize", $dataAX[ 'tileSize' ] );
        unset ( $dataAX[ 'tileSize' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'tileSize' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPalette::tileSize ( \$data[ 'tileSize' ] type must be 'Number' | 'Object'" );
      }
      
    }
    
    
    /**
     * Specifies the initially selected color.
     * @var $dataAX[ 'value' ]: ( String | Color ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/colorpalette#configuration-value
     * 
     * @code
       Example
        <div id="palette"></div>
        <script>
        $("#palette").kendoColorPalette({
          palette: "basic",
          value: "#fff"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function value ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "value" => $dataAX );
      
      if ( is_string ( $dataAX[ 'value' ] ) )
      {
        parent::addData ( "value", $dataAX[ 'value' ] );
        unset ( $dataAX[ 'value' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'value' ] ) )
      {
        throw new Exception ( "Type error - KendoUiColorPalette::value ( \$data[ 'value' ] type must be 'String' | 'Color'" );
      }
      
    }
    
    
  }