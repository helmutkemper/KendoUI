<?php

  /**
   * Represents the Kendo UI Calendar widget. Inherits from Widget.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar
   * Note the option will not be applied if start option is lower than depth. Always set both and start and depth options.
   */
  class KendoUiCalendar extends javascript
  {
    private $outputCStr;
    private $idElementCStr;
    private $nameVarCStr;
    private $htmlTagExtraCStr;
    
    function __construct ( $idElementAStr, $nameVarAStr = null, $htmlTagExtraAStr = null )
    {
      $this->idElementCStr = $idElementAStr;
      $this->nameVarCStr = $nameVarAStr;
      $this->htmlTagExtraCStr = $htmlTagExtraAStr;
    }
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ()
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$this->idElementCStr}\" {$this->htmlTagExtraCStr}>";
      return self::$mainHtmlCodeCStr;
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ()
    {
      if ( !is_null ( $this->nameVarCStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$this->nameVarCStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$this->idElementCStr}\").KendoUiCalendar({";
      self::$mainJavaScriptCodeCStr .= $this->toObject( $this->dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      $this->dataCArr = null;
      return self::$mainJavaScriptCodeCStr;
    }
    
    /**
     * Specifies the culture info used by the widget.
     * @var $dataAX[ 'culture' ]: ( String ) ( default: "en-US" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-culture
     * 
     * @code
       Example - specify German culture internationalization
        <div id="calendar"></div>
        <script>
            $("#calendar").kendoCalendar({
                culture: "de-DE"
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function culture ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "culture" => $dataAX );
      
      if ( is_string ( $dataAX[ 'culture' ] ) )
      {
        parent::addData ( "culture", $dataAX[ 'culture' ] );
        unset ( $dataAX[ 'culture' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'culture' ] ) )
      {
        throw new Exception ( "Type error - KendoUiCalendar::culture ( \$data[ 'culture' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies a list of dates, which will be passed to the month template.
     * @var $dataAX[ 'dates' ]: ( Array )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-dates
     * 
     * @code
       Example - specify a list of dates
        <div id="calendar"></div>
        <script>
            $("#calendar").kendoCalendar({
                value: new Date(2000, 10, 1),
                dates: [
                    new Date(2000, 10, 10, 10, 0, 0),
                    new Date(2000, 10, 10, 30, 0)
                ] //can manipulate month template depending on this array.
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function dates ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dates" => $dataAX );
      
      if ( is_array ( $dataAX[ 'dates' ] ) )
      {
        parent::addData ( "dates", $dataAX[ 'dates' ] );
        unset ( $dataAX[ 'dates' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dates' ] ) )
      {
        throw new Exception ( "Type error - KendoUiCalendar::dates ( \$data[ 'dates' ] type must be 'Array'" );
      }
      
    }
    
    
    /**
     * Specifies the navigation depth. The following settings are available for the <strong>depth</strong> value:
     * <b>"month"</b> - shows the days of the month
     * <b>"year"</b> - shows the months of the year
     * <b>"decade"</b> - shows the years of the decade
     * <b>"century"</b> - shows the decades from the century
     * Note the option will not be applied if <strong>start</strong> option is <em>lower</em> than <strong>depth</strong>. Always set both and <strong>start</strong> and <strong>depth</strong> options.
     * 
     * ( ! ) Note the option will not be applied if <strong>start</strong> option is <em>lower</em> than <strong>depth</strong>. Always set both and <strong>start</strong> and <strong>depth</strong> options.
     * @var $dataAX[ 'depth' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-depth
     * 
     * @code
       "month"

shows the days of the month

"year"

shows the months of the year

"decade"

shows the years of the decade

"century"

shows the decades from the century


Note the option will not be applied if start option is lower than depth. Always set both and start and depth options.


Example - set navigation depth of the calendar
        <div id="calendar"></div>
        <script>
            $("#calendar").kendoCalendar({
                depth: "year"
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function depth ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "depth" => $dataAX );
      
      if ( is_string ( $dataAX[ 'depth' ] ) )
      {
        parent::addData ( "depth", $dataAX[ 'depth' ] );
        unset ( $dataAX[ 'depth' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'depth' ] ) )
      {
        throw new Exception ( "Type error - KendoUiCalendar::depth ( \$data[ 'depth' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> which renders the footer. If false, the footer will not be rendered.
     * @var $dataAX[ 'footer' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-footer
     * 
     * @code
       Example - specify footer template as a function
        <div id="calendar"></div>
        <script id="footer-template" type="text/x-kendo-template">
            Today - #: kendo.toString(data, "d") #
        </script>
        <script>
            $("#calendar").kendoCalendar({
                footer: kendo.template($("#footer-template").html())
            });
        </script>
     * @endcode
     * @code
        Example - specify footer template as a string
        <div id="calendar"></div>
        <script>
            $("#calendar").kendoCalendar({
                footer: "Today - #: kendo.toString(data, 'd') #"
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function footer ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "footer" => $dataAX );
      
      if ( is_string ( $dataAX[ 'footer' ] ) )
      {
        parent::addData ( "footer", $dataAX[ 'footer' ] );
        unset ( $dataAX[ 'footer' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'footer' ] ) )
      {
        throw new Exception ( "Type error - KendoUiCalendar::footer ( \$data[ 'footer' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
    /**
     * Specifies the format, which is used to parse value set with value() method.
     * @var $dataAX[ 'format' ]: ( String ) ( default: "MM/dd/yyyy" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-format
     * 
     * @code
       Example - specify a custom date format
        <div id="calendar"></div>
        <script>
            $("#calendar").kendoCalendar({
                format: "yyyy/MM/dd"
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function format ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "format" => $dataAX );
      
      if ( is_string ( $dataAX[ 'format' ] ) )
      {
        parent::addData ( "format", $dataAX[ 'format' ] );
        unset ( $dataAX[ 'format' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'format' ] ) )
      {
        throw new Exception ( "Type error - KendoUiCalendar::format ( \$data[ 'format' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the maximum date, which the calendar can show.
     * @var $dataAX[ 'max' ]: ( Date ) ( default: Date(2099, 11, 31) )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-max
     * 
     * @code
       Example - specify the maximum date
        <div id="calendar"></div>
        <script>
            $("#calendar").kendoCalendar({
                max: new Date(2013, 0, 1) // set the max date to Jan 1st, 2013
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function max ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "max" => $dataAX );
      
      if ( is_array ( $dataAX[ 'max' ] ) )
      {
        $dateAsString = "";
        if ( isset ( $dataAX[ 'max' ][ "Year" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Year" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Month" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Month" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Day" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Day" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Hour" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Hour" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Minute" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Minute" ]}, ";
        }
        if ( isset ( $dataAX[ 'max' ][ "Second" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'max' ][ "Second" ]}";
        }
        $dateAsString = "new Date ({$dateAsString});";
        parent::addData ( "max", $dateAsString );
        unset ( $dataAX[ 'max' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'max' ] ) )
      {
        throw new Exception ( "Type error - KendoUiCalendar::max ( \$data[ 'max' ] type must be 'Date'" );
      }
      
    }
    
    
    /**
     * Specifies the minimum date, which the calendar can show.
     * @var $dataAX[ 'min' ]: ( Date ) ( default: Date(1900, 0, 1) )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-min
     * 
     * @code
       Example - specify the minimum date
        <div id="calendar"></div>
        <script>
            // set the min date to Jan 1st, 2011
            $("#calendar").kendoCalendar({
                min: new Date(2011, 0, 1)
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function min ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "min" => $dataAX );
      
      if ( is_array ( $dataAX[ 'min' ] ) )
      {
        $dateAsString = "";
        if ( isset ( $dataAX[ 'min' ][ "Year" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Year" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Month" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Month" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Day" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Day" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Hour" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Hour" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Minute" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Minute" ]}, ";
        }
        if ( isset ( $dataAX[ 'min' ][ "Second" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'min' ][ "Second" ]}";
        }
        $dateAsString = "new Date ({$dateAsString});";
        parent::addData ( "min", $dateAsString );
        unset ( $dataAX[ 'min' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'min' ] ) )
      {
        throw new Exception ( "Type error - KendoUiCalendar::min ( \$data[ 'min' ] type must be 'Date'" );
      }
      
    }
    
    
    /**
     * Templates for the cells rendered in "month" view.
     * @var $dataAX[ 'month' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-month
     * 
     * The template to be used for rendering the cells in "month" view, which are between the min/max range. By default, the widget renders the value of the corresponding day.
     * @var $dataAX[ 'month' ][ 'content' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-month.content
     * 
     * @code
       Example - specify cell template as a string
        <div id="calendar"></div>
        <script id="cell-template" type="text/x-kendo-template">
            <div class="#= data.value < 10 ? 'exhibition' : 'party' #"></div>
            #= data.value #
        </script>
        <script>
            $("#calendar").kendoCalendar({
                month: {
                   content: $("#cell-template").html()
                }
            });
        </script>
     * @endcode
     * @code
        Example - specify an empty cell template as a string
        <div id="calendar"></div>
        <script>
            $("#calendar").kendoCalendar({
                month: {
                   empty: '-'
                }
            });
        </script>
     * @endcode
     * 
     * The template to be used for rendering the cells in the "month" view, which are not in the min/max range. By default, the widget renders an empty string.
     * @var $dataAX[ 'month' ][ 'empty' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-month.empty
     * 
     * @code
       Example - specify cell template as a string
        <div id="calendar"></div>
        <script id="cell-template" type="text/x-kendo-template">
            <div class="#= data.value < 10 ? 'exhibition' : 'party' #"></div>
            #= data.value #
        </script>
        <script>
            $("#calendar").kendoCalendar({
                month: {
                   content: $("#cell-template").html()
                }
            });
        </script>
     * @endcode
     * @code
        Example - specify an empty cell template as a string
        <div id="calendar"></div>
        <script>
            $("#calendar").kendoCalendar({
                month: {
                   empty: '-'
                }
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function month ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "month" => $dataAX );
      
      if ( is_string ( $dataAX[ 'month' ][ 'content' ] ) )
      {
        parent::addData ( "month.content", $dataAX[ 'month' ][ 'content' ] );
        unset ( $dataAX[ 'month' ][ 'content' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'month' ][ 'content' ] ) )
      {
        throw new Exception ( "Type error - KendoUiCalendar::month ( \$data[ 'month' ][ 'content' ] type must be 'String'" );
      }
      
      if ( is_string ( $dataAX[ 'month' ][ 'empty' ] ) )
      {
        parent::addData ( "month.empty", $dataAX[ 'month' ][ 'empty' ] );
        unset ( $dataAX[ 'month' ][ 'empty' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'month' ][ 'empty' ] ) )
      {
        throw new Exception ( "Type error - KendoUiCalendar::month ( \$data[ 'month' ][ 'empty' ] type must be 'String'" );
      }
      
      if ( is_array ( $dataAX[ 'month' ] ) )
      {
        parent::addData ( "month", $dataAX[ 'month' ] );
        unset ( $dataAX[ 'month' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'month' ] ) )
      {
        throw new Exception ( "Type error - KendoUiCalendar::month ( \$data[ 'month' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * Specifies the start view. The following settings are available for the <strong>start</strong> value:
     * <b>"month"</b> - shows the days of the month
     * <b>"year"</b> - shows the months of the year
     * <b>"decade"</b> - shows the years of the decade
     * <b>"century"</b> - shows the decades from the century
     * @var $dataAX[ 'start' ]: ( String ) ( default: "month" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-start
     * 
     * @code
       "month"

shows the days of the month

"year"

shows the months of the year

"decade"

shows the years of the decade

"century"

shows the decades from the century

Example - specify the initial view, which calendar renders
        <div id="calendar"></div>
        <script>
            $("#calendar").kendoCalendar({
                start: "year"
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function start ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "start" => $dataAX );
      
      if ( is_string ( $dataAX[ 'start' ] ) )
      {
        parent::addData ( "start", $dataAX[ 'start' ] );
        unset ( $dataAX[ 'start' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'start' ] ) )
      {
        throw new Exception ( "Type error - KendoUiCalendar::start ( \$data[ 'start' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the selected date.
     * @var $dataAX[ 'value' ]: ( Date ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-value
     * 
     * @code
       Example - specify the selected value of the widget
        <div id="calendar"></div>
        <script>
            $("#calendar").kendoCalendar({
                value: new Date(2012, 0, 1)
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function value ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "value" => $dataAX );
      
      if ( is_array ( $dataAX[ 'value' ] ) )
      {
        $dateAsString = "";
        if ( isset ( $dataAX[ 'value' ][ "Year" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Year" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Month" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Month" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Day" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Day" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Hour" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Hour" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Minute" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Minute" ]}, ";
        }
        if ( isset ( $dataAX[ 'value' ][ "Second" ] ) )
        {
          $dateAsString .= "{$dataAX[ 'value' ][ "Second" ]}";
        }
        $dateAsString = "new Date ({$dateAsString});";
        parent::addData ( "value", $dateAsString );
        unset ( $dataAX[ 'value' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'value' ] ) )
      {
        throw new Exception ( "Type error - KendoUiCalendar::value ( \$data[ 'value' ] type must be 'Date'" );
      }
      
    }
    
    
  }