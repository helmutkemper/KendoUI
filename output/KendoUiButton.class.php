<?php

  /**
   * Indicates whether the Button should be enabled or disabled. By default, it is enabled, unless a disabled="disabled" attribute is detected.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/button
   * 
   */
  class KendoUiButton extends javascript
  {
    private $outputCStr;
    private $idElementCStr;
    private $nameVarCStr;
    private $htmlTagExtraCStr;
    
    function __construct ( $idElementAStr, $nameVarAStr = null, $htmlTagExtraAStr = null )
    {
      $this->idElementCStr = $idElementAStr;
      $this->nameVarCStr = $nameVarAStr;
      $this->htmlTagExtraCStr = $htmlTagExtraAStr;
    }
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ()
    {
      if ( !is_null ( $this->nameVarCStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$this->nameVarCStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$this->idElementCStr}\").KendoUiButton({";
      self::$mainJavaScriptCodeCStr .= $this->toObject( $this->dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      $this->dataCArr = null;
      return self::$mainJavaScriptCodeCStr;
    }
    
    /**
     * Indicates whether the <strong>Button</strong> should be enabled or disabled. By default, it is enabled, unless a <b><u>disabled="disabled"</u></b> attribute is detected.
     * @var $dataAX[ 'enable' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/button#configuration-enable
     * 
     * @code
       Example
        <button id="button" type="button">Foo</button>
        <script>
        $("#button").kendoButton({
            enable: false
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function enable ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "enable" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'enable' ] ) )
      {
        parent::addData ( "enable", $dataAX[ 'enable' ] );
        unset ( $dataAX[ 'enable' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'enable' ] ) )
      {
        throw new Exception ( "Type error - KendoUiButton::enable ( \$data[ 'enable' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Defines a name of an existing icon in the Kendo UI theme sprite. The icon will be applied as background image of a <b><u>span</u></b> element inside the <strong>Button</strong>. The <b><u>span</u></b> element can be added automatically by the widget, or an existing element can be used, if it has a <b><u>k-icon</u></b> CSS class applied. For a list of available icon names, please refer to the <a href="http://demos.telerik.com/kendo-ui/web/styling/icons.html">Icons demo</a>.
     * @var $dataAX[ 'icon' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/button#configuration-icon
     * 
     * @code
       Example
        <button id="button" type="button">Cancel</button>
        <script>
        $("#button").kendoButton({
            icon: "cancel"
        });
        </script>
     * @endcode
     * @code
        Example with an existing span element
        <button id="button" type="button">
            <span class="k-icon"></span> Cancel
        </button>
        <script>
        $("#button").kendoButton({
            icon: "cancel"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function icon ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "icon" => $dataAX );
      
      if ( is_string ( $dataAX[ 'icon' ] ) )
      {
        parent::addData ( "icon", $dataAX[ 'icon' ] );
        unset ( $dataAX[ 'icon' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'icon' ] ) )
      {
        throw new Exception ( "Type error - KendoUiButton::icon ( \$data[ 'icon' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Defines a URL, which will be used for an <b><u>img</u></b> element inside the Button. The URL can be relative or absolute. In case it is relative, it will be evaluated with relation to the web page URL.
     * The <b><u>img</u></b> element can be added automatically by the widget, or an existing element can be used, if it has a <b><u>k-image</u></b> CSS class applied.
     * @var $dataAX[ 'imageUrl' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/button#configuration-imageUrl
     * 
     * @code
       Example
        <button id="button" type="button">Edit</button>
        <script>
        $("#button").kendoButton({
            imageUrl: "/images/edit-icon.gif"
        });
        </script>
     * @endcode
     * @code
        Example with an existing img element
        <button id="button" type="button">
            <img class="k-image" alt="Edit" /> Edit
        </button>
        <script>
        $("#button").kendoButton({
            imageUrl: "/images/edit-icon.gif"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function imageUrl ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "imageUrl" => $dataAX );
      
      if ( is_string ( $dataAX[ 'imageUrl' ] ) )
      {
        parent::addData ( "imageUrl", $dataAX[ 'imageUrl' ] );
        unset ( $dataAX[ 'imageUrl' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'imageUrl' ] ) )
      {
        throw new Exception ( "Type error - KendoUiButton::imageUrl ( \$data[ 'imageUrl' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Defines a CSS class (or multiple classes separated by spaces), which will be used for applying a background image to a <b><u>span</u></b> element inside the <strong>Button</strong>. In case you want to use an icon from the Kendo UI theme sprite background image, it is easier to use the <a href="http://docs.telerik.com/kendo-ui/api/javascript/ui/button#configuration-icon"><b><u>icon</u></b> property</a>.
     * The <b><u>span</u></b> element can be added automatically by the widget, or an existing element can be used, if it has a <b><u>k-sprite</u></b> CSS class applied.
     * @var $dataAX[ 'spriteCssClass' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/button#configuration-spriteCssClass
     * 
     * @code
       Example
        <button id="button" type="button">Edit</button>
        <script>
        $("#button").kendoButton({
            spriteCssClass: "myEditIcon"
        });
        </script>
     * @endcode
     * @code
        Example with an existing span element
        <button id="button" type="button">
            <span class="k-sprite"></span> Edit
        </button>
        <script>
        $("#button").kendoButton({
            spriteCssClass: "myEditIcon"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function spriteCssClass ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "spriteCssClass" => $dataAX );
      
      if ( is_string ( $dataAX[ 'spriteCssClass' ] ) )
      {
        parent::addData ( "spriteCssClass", $dataAX[ 'spriteCssClass' ] );
        unset ( $dataAX[ 'spriteCssClass' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'spriteCssClass' ] ) )
      {
        throw new Exception ( "Type error - KendoUiButton::spriteCssClass ( \$data[ 'spriteCssClass' ] type must be 'String'" );
      }
      
    }
    
    
  }