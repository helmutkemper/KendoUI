<?php

  /**
   * This is the HSV color selector, which is used by default in the
   * kendo.ui.ColorPicker popup when there is no palette set.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/flatcolorpicker
   * 
   */
  class KendoUiFlatColorPicker extends javascript
  {
    private $outputCStr;
    private $idElementCStr;
    private $nameVarCStr;
    private $htmlTagExtraCStr;
    
    function __construct ( $idElementAStr, $nameVarAStr = null, $htmlTagExtraAStr = null )
    {
      $this->idElementCStr = $idElementAStr;
      $this->nameVarCStr = $nameVarAStr;
      $this->htmlTagExtraCStr = $htmlTagExtraAStr;
    }
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ( $htmlIdAStr, $extraAStr )
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$htmlIdAStr}\" {$extraAStr}>";
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ()
    {
      if ( !is_null ( $this->nameVarCStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$this->nameVarCStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$this->idElementCStr}\").KendoUiFlatColorPicker({";
      self::$mainJavaScriptCodeCStr .= $this->toObject( $this->dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      $this->dataCArr = null;
      return self::$mainJavaScriptCodeCStr;
    }
    
    /**
     * Specifies whether we should display the opacity slider to allow selection of transparency.
     * @var $dataAX[ 'opacity' ]: ( Boolean ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/flatcolorpicker#configuration-opacity
     * 
     * @code
       Example
        <div id="flatpicker"></div>
        <script>
        $("#flatpicker").kendoFlatColorPicker({
          opacity: true
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function opacity ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "opacity" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'opacity' ] ) )
      {
        parent::addData ( "opacity", $dataAX[ 'opacity' ] );
        unset ( $dataAX[ 'opacity' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'opacity' ] ) )
      {
        throw new Exception ( "Type error - KendoUiFlatColorPicker::opacity ( \$data[ 'opacity' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Specifies whether the widget should display the Apply / Cancel buttons.
     * @var $dataAX[ 'buttons' ]: ( Boolean ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/flatcolorpicker#configuration-buttons
     * 
     * @code
       Example
        <div id="flatpicker"></div>
        <script>
        $("#flatpicker").kendoFlatColorPicker({
          buttons: true
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function buttons ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "buttons" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'buttons' ] ) )
      {
        parent::addData ( "buttons", $dataAX[ 'buttons' ] );
        unset ( $dataAX[ 'buttons' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'buttons' ] ) )
      {
        throw new Exception ( "Type error - KendoUiFlatColorPicker::buttons ( \$data[ 'buttons' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Specifies the initially selected color.
     * @var $dataAX[ 'value' ]: ( String | Color ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/flatcolorpicker#configuration-value
     * 
     * @code
       Example
        <div id="flatpicker"></div>
        <script>
        $("#flatpicker").kendoFlatColorPicker({
          value: "#b72bba"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function value ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "value" => $dataAX );
      
      if ( is_string ( $dataAX[ 'value' ] ) )
      {
        parent::addData ( "value", $dataAX[ 'value' ] );
        unset ( $dataAX[ 'value' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'value' ] ) )
      {
        throw new Exception ( "Type error - KendoUiFlatColorPicker::value ( \$data[ 'value' ] type must be 'String' | 'Color'" );
      }
      
    }
    
    
    /**
     * Specifies whether we should display the preview bar which displays the current color and the input field.
     * @var $dataAX[ 'preview' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/flatcolorpicker#configuration-preview
     * 
     * @code
       Example
        <div id="flatpicker"></div>
        <script>
        $("#flatpicker").kendoFlatColorPicker({
          preview: false
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function preview ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "preview" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'preview' ] ) )
      {
        parent::addData ( "preview", $dataAX[ 'preview' ] );
        unset ( $dataAX[ 'preview' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'preview' ] ) )
      {
        throw new Exception ( "Type error - KendoUiFlatColorPicker::preview ( \$data[ 'preview' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Specifies whether the UI should be updated while the user is typing in the input field, whenever a valid color can be parsed. If you pass <b><u>false</u></b> for this, the widget will update only when ENTER is pressed.
     * @var $dataAX[ 'autoupdate' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/flatcolorpicker#configuration-autoupdate
     * 
     * @code
       Example
        <div id="flatpicker"></div>
        <script>
        $("#flatpicker").kendoFlatColorPicker({
          autoupdate: false
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function autoupdate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "autoupdate" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'autoupdate' ] ) )
      {
        parent::addData ( "autoupdate", $dataAX[ 'autoupdate' ] );
        unset ( $dataAX[ 'autoupdate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'autoupdate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiFlatColorPicker::autoupdate ( \$data[ 'autoupdate' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Allows customization of "Apply" / "Cancel" labels.
     * @var $dataAX[ 'messages' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/flatcolorpicker#configuration-messages
     * 
     * @code
       Example
        <div id="flatpicker"></div>
        <script>
        $("#flatpicker").kendoFlatColorPicker({
          buttons: true,
          messages: {
            apply: "Update",
            cancel: "Discard"
          }
        });
        </script>
     * @endcode
     * 
     * Allows customization of "Apply" label.
     * @var $dataAX[ 'messages' ][ 'apply' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/flatcolorpicker#configuration-messages.apply
     * 
     * @code
       Example
        <div id="flatpicker"></div>
        <script>
        $("#flatpicker").kendoFlatColorPicker({
          buttons: true,
          messages: {
            apply: "Update"
          }
        });
        </script>
     * @endcode
     * @code
        Example
        <div id="flatpicker"></div>
        <script>
        $("#flatpicker").kendoFlatColorPicker({
          buttons: true,
          messages: {
            cancel: "Discard"
          }
        });
        </script>
     * @endcode
     * 
     * Allows customization of "Cancel" label.
     * @var $dataAX[ 'messages' ][ 'cancel' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/flatcolorpicker#configuration-messages.cancel
     * 
     * @code
       Example
        <div id="flatpicker"></div>
        <script>
        $("#flatpicker").kendoFlatColorPicker({
          buttons: true,
          messages: {
            apply: "Update"
          }
        });
        </script>
     * @endcode
     * @code
        Example
        <div id="flatpicker"></div>
        <script>
        $("#flatpicker").kendoFlatColorPicker({
          buttons: true,
          messages: {
            cancel: "Discard"
          }
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function messages ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "messages" => $dataAX );
      
      if ( is_string ( $dataAX[ 'messages' ][ 'apply' ] ) )
      {
        parent::addData ( "messages.apply", $dataAX[ 'messages' ][ 'apply' ] );
        unset ( $dataAX[ 'messages' ][ 'apply' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'messages' ][ 'apply' ] ) )
      {
        throw new Exception ( "Type error - KendoUiFlatColorPicker::messages ( \$data[ 'messages' ][ 'apply' ] type must be 'String'" );
      }
      
      if ( is_string ( $dataAX[ 'messages' ][ 'cancel' ] ) )
      {
        parent::addData ( "messages.cancel", $dataAX[ 'messages' ][ 'cancel' ] );
        unset ( $dataAX[ 'messages' ][ 'cancel' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'messages' ][ 'cancel' ] ) )
      {
        throw new Exception ( "Type error - KendoUiFlatColorPicker::messages ( \$data[ 'messages' ][ 'cancel' ] type must be 'String'" );
      }
      
      if ( is_array ( $dataAX[ 'messages' ] ) )
      {
        parent::addData ( "messages", $dataAX[ 'messages' ] );
        unset ( $dataAX[ 'messages' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'messages' ] ) )
      {
        throw new Exception ( "Type error - KendoUiFlatColorPicker::messages ( \$data[ 'messages' ] type must be 'Object'" );
      }
      
    }
    
    
  }