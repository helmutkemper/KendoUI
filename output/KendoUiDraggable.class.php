<?php

  /**
   * Constrains the hint movement to either the horizontal (x) or vertical (y) axis. Can be set to either "x" or "y".
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/draggable
   * 
   */
  class KendoUiDraggable extends javascript
  {
    private $outputCStr;
    private $idElementCStr;
    private $nameVarCStr;
    private $htmlTagExtraCStr;
    
    function __construct ( $idElementAStr, $nameVarAStr = null, $htmlTagExtraAStr = null )
    {
      $this->idElementCStr = $idElementAStr;
      $this->nameVarCStr = $nameVarAStr;
      $this->htmlTagExtraCStr = $htmlTagExtraAStr;
    }
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ( $htmlIdAStr, $extraAStr )
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$htmlIdAStr}\" {$extraAStr}>";
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ()
    {
      if ( !is_null ( $this->nameVarCStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$this->nameVarCStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$this->idElementCStr}\").KendoUiDraggable({";
      self::$mainJavaScriptCodeCStr .= $this->toObject( $this->dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      $this->dataCArr = null;
      return self::$mainJavaScriptCodeCStr;
    }
    
    /**
     * Constrains the hint movement to either the horizontal (x) or vertical (y) axis. Can be set to either "x" or "y".
     * @var $dataAX[ 'axis' ]: ( String ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/draggable#configuration-axis
     * 
     * @code
       Example - initialize horizontally draggable element
        <div id="draggable"></div>
        
        <script>
          $("#draggable").kendoDraggable({
            hint: function(element) {
              return element.clone();
            },
            axis: "x"
          });
        </script>
        <style>
          #draggable {
            width: 50px;
            height: 50px;
            background-color: orange;
            border: 2px solid green;
          }
        </style>
     * @endcode
     * @throws string type error
     */
    public function axis ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "axis" => $dataAX );
      
      if ( is_string ( $dataAX[ 'axis' ] ) )
      {
        parent::addData ( "axis", $dataAX[ 'axis' ] );
        unset ( $dataAX[ 'axis' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'axis' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDraggable::axis ( \$data[ 'axis' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * If set to <b><u>true</u></b> the widget will auto-scroll the container when the mouse/finger is close to the top/bottom of it.
     * @var $dataAX[ 'autoScroll' ]: ( Boolean ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/draggable#configuration-autoScroll
     * 
     * @code
       Example - use autoScroll in a scrollable container
        <div style="width: 200px; height: 200px; overflow: auto">
            <div style="width: 1000px; height: 1000px;">
                <div id="draggable"></div>
            </div>
        </div>
        
        <script>
          $("#draggable").kendoDraggable({ hint: function(element) { return element.clone(); }, autoScroll: true });
        </script>
        
        <style>
          #draggable {
            width: 50px;
            height: 50px;
            background-color: orange;
            border: 2px solid green;
          }
        </style>
     * @endcode
     * @throws string type error
     */
    public function autoScroll ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "autoScroll" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'autoScroll' ] ) )
      {
        parent::addData ( "autoScroll", $dataAX[ 'autoScroll' ] );
        unset ( $dataAX[ 'autoScroll' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'autoScroll' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDraggable::autoScroll ( \$data[ 'autoScroll' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * If set, the hint movement is constrained to the container boundaries.
     * @var $dataAX[ 'container' ]: ( jQuery )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/draggable#configuration-container
     * 
     * @code
       Example
        <div id="container">
          <div id="draggable"></div>
        </div>
        
        <script>
          $("#draggable").kendoDraggable({
            hint: function(element) {
              return element.clone();
            },
            container: $("#container")
          });
        </script>
        <style>
          #container {
            width: 200px;
            height: 200px;
            border: 1px dashed red;
          }
          #draggable {
            width: 50px;
            height: 50px;
            background-color: orange;
            border: 2px solid green;
          }
        </style>
     * @endcode
     * @throws string type error
     */
    public function container ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "container" => $dataAX );
      
      if ( is_string ( $dataAX[ 'container' ] ) )
      {
        parent::addData ( "container", $dataAX[ 'container' ] );
        unset ( $dataAX[ 'container' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'container' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDraggable::container ( \$data[ 'container' ] type must be 'jQuery'" );
      }
      
    }
    
    
    /**
     * If set, specifies the offset of the hint relative to the mouse cursor/finger. By default, the hint is initially positioned on top of the draggable source offset. The option accepts an object with two keys: <b><u>top</u></b> and <b><u>left</u></b>.
     * @var $dataAX[ 'cursorOffset' ]: ( Object ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/draggable#configuration-cursorOffset
     * 
     * @code
       Example
        <div id="draggable"></div>
        
        <script>
          $("#draggable").kendoDraggable({
            hint: function(element) {
              return element.clone();
            },
            cursorOffset: { top: 30, left: 100 }
          });
        </script>
        <style>
          #draggable {
            width: 50px;
            height: 50px;
            background-color: orange;
            border: 2px solid green;
          }
        </style>
     * @endcode
     * @throws string type error
     */
    public function cursorOffset ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "cursorOffset" => $dataAX );
      
      if ( is_array ( $dataAX[ 'cursorOffset' ] ) )
      {
        parent::addData ( "cursorOffset", $dataAX[ 'cursorOffset' ] );
        unset ( $dataAX[ 'cursorOffset' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'cursorOffset' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDraggable::cursorOffset ( \$data[ 'cursorOffset' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * The required distance that the mouse should travel in order to initiate a drag.
     * @var $dataAX[ 'distance' ]: ( Number ) ( default: 5 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/draggable#configuration-distance
     * 
     * @code
       Example
        <div id="draggable"></div>
        
        <script>
          $("#draggable").kendoDraggable({
            hint: function(element) {
              return element.clone();
            },
            distance: 50
          });
        </script>
        <style>
          #draggable {
            width: 50px;
            height: 50px;
            background-color: orange;
            border: 2px solid green;
          }
        </style>
     * @endcode
     * @throws string type error
     */
    public function distance ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "distance" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'distance' ] ) )
      {
        parent::addData ( "distance", $dataAX[ 'distance' ] );
        unset ( $dataAX[ 'distance' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'distance' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDraggable::distance ( \$data[ 'distance' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * Selects child elements that are draggable if a widget is attached to a container.
     * @var $dataAX[ 'filter' ]: ( Selector )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/draggable#configuration-filter
     * 
     * @code
       Example
        <div id="container">
          <div class="draggable"></div>
          <div class="static"></div>
          <div class="static"></div>
          <div class="static"></div>
          <div class="draggable"></div>
        </div>
        <script>
          $("#container").kendoDraggable({
            filter: ".draggable",
            hint: function(element) {
              return element.clone();
            }
          });
        </script>
        <style>
          .draggable, .static {
            width: 50px;
            height: 50px;
            border: 2px solid green;
            margin: 5px;
          }
          .draggable { background-color: orange; }
          .static{ background-color: purple; }
        </style>
     * @endcode
     * @throws string type error
     */
    public function filter ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "filter" => $dataAX );
      
      if ( is_string ( $dataAX[ 'filter' ] ) )
      {
        parent::addData ( "filter", $dataAX[ 'filter' ] );
        unset ( $dataAX[ 'filter' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'filter' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDraggable::filter ( \$data[ 'filter' ] type must be 'Selector'" );
      }
      
    }
    
    
    /**
     * Used to group sets of draggable and drop targets. A draggable with the same group value as a drop target will be accepted by the drop target.
     * @var $dataAX[ 'group' ]: ( String ) ( default: "default" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/draggable#configuration-group
     * 
     * @code
       Example - grouping draggable elements
        <div class="orange"></div>
        <div class="orange"></div>
        <div class="purple"></div>
        <div class="purple"></div>
        <div id="orangeArea"></div>
        <div id="purpleArea"></div>
        
        <script>
          $(".orange").kendoDraggable({
            group: "orangeGroup",
            hint: function(element) {
              return element.clone();
            }
          });
        
          $(".purple").kendoDraggable({
            group: "purpleGroup",
            hint: function(element) {
              return element.clone();
            }
          });
        
          $("#orangeArea").kendoDropTarget({ group: "orangeGroup", drop: onDrop });
          $("#purpleArea").kendoDropTarget({ group: "purpleGroup", drop: onDrop });
        
          function onDrop(e) {
            e.draggable.destroy();
            e.draggable.element.remove();
          }
        </script>
        <style>
          .orange, .purple{
            width: 50px;
            height: 50px;
            border: 2px solid green;
            margin: 5px;
          }
          #orangeArea, #purpleArea {
            width: 200px;
            height: 200px;
            border: 2px solid green;
            margin: 5px;
          }
          .orange, #orangeArea { background-color: orange; }
          .purple, #purpleArea { background-color: purple; }
        </style>
     * @endcode
     * @throws string type error
     */
    public function group ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "group" => $dataAX );
      
      if ( is_string ( $dataAX[ 'group' ] ) )
      {
        parent::addData ( "group", $dataAX[ 'group' ] );
        unset ( $dataAX[ 'group' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'group' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDraggable::group ( \$data[ 'group' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Provides a way for customization of the drag indicator. If a function is supplied, it receives one argument - the draggable element's jQuery object.
     * @var $dataAX[ 'hint' ]: ( Function | jQuery )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/draggable#configuration-hint
     * 
     * @code
       Example - customizing draggable tooltip
        <div id="draggable"></div>
        
        <script>
          $("#draggable").kendoDraggable({
            hint: function(element) {
              var hintElement = $("<div id='hint'></div>");
              hintElement.css({
                "background-image": "url('http://www.telerik.com/image/kendo-logo.png')",
                "width": "230px",
                "height": "80px"
              });
              return hintElement;
            }
          });
        </script>
        <style>
          #draggable {
            width: 50px;
            height: 50px;
            background-color: orange;
            border: 2px solid green;
          }
        </style>
     * @endcode
     * @throws string type error
     */
    public function hint ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "hint" => $dataAX );
      
      if ( is_string ( $dataAX[ 'hint' ] ) )
      {
        parent::addData ( "hint", $dataAX[ 'hint' ] );
        unset ( $dataAX[ 'hint' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'hint' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDraggable::hint ( \$data[ 'hint' ] type must be 'Function' | 'jQuery'" );
      }
      
    }
    
    
    /**
     * Suitable for touch oriented user interface, in order to avoid collision with the touch scrolling gesture. When set to <b><u>true</u></b>, the widget will be activated after the user taps and holds the finger on the element for a short amount of time.
     * The <em>draggable</em> will also be activated by pressing, holding and lifting the finger without any movement. Dragging it afterwards will initiate the drag immediately. The activated mode can be canceled by calling <b><u>cancelHold</u></b>.
     * @var $dataAX[ 'holdToDrag' ]: ( Boolean ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/draggable#configuration-holdToDrag
     * 
     * @code
       Example - hold to drag
        <div id="draggable"></div>
        
        <script>
          $("#draggable").kendoDraggable({
            holdToDrag: true,
            hold: function(e) {
                $("draggable").css("background", "red");
            },
            hint: function(element) {
              var hintElement = $("<div id='hint'></div>");
              hintElement.css({
                "background-image": "url('http://www.telerik.com/image/kendo-logo.png')",
                "width": "230px",
                "height": "80px"
              });
              return hintElement;
            }
          });
        </script>
        
        <style>
          #draggable {
            width: 50px;
            height: 50px;
            background-color: orange;
            border: 2px solid green;
          }
        </style>
     * @endcode
     * @throws string type error
     */
    public function holdToDrag ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "holdToDrag" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'holdToDrag' ] ) )
      {
        parent::addData ( "holdToDrag", $dataAX[ 'holdToDrag' ] );
        unset ( $dataAX[ 'holdToDrag' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'holdToDrag' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDraggable::holdToDrag ( \$data[ 'holdToDrag' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Specifies child elements for which the drag will not be initialized. Useful if the draggable contains input elements.
     * @var $dataAX[ 'ignore' ]: ( Selector )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/draggable#configuration-ignore
     * 
     * @code
       Example
        <div id="container">
            <input type="text" />
            <div>Foo</div>
        </div>
        
        <script>
          $("#container").kendoDraggable({
            ignore: "input",
            hint: function(element) {
              return element.clone();
            }
          });
        </script>
        <style>
            #container {
                width: 50px;
                height: 50px;
                border: 2px solid green;
                margin: 5px;
            }
        </style>
     * @endcode
     * @throws string type error
     */
    public function ignore ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "ignore" => $dataAX );
      
      if ( is_string ( $dataAX[ 'ignore' ] ) )
      {
        parent::addData ( "ignore", $dataAX[ 'ignore' ] );
        unset ( $dataAX[ 'ignore' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'ignore' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDraggable::ignore ( \$data[ 'ignore' ] type must be 'Selector'" );
      }
      
    }
    
    
  }