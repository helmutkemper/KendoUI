<?php

  /**
   * Represents the Kendo UI DropDownList widget. Inherits from Widget.
   * 
   * This class has been automatically generated by the class "classMaker.class.php" written by
   * Helmut Kemper <helmut.kemper@gmail.com> based into Kendo UI documents.
   * http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist
   * Important When dataTextField is defined, thedataValueField option also should be set.
   */
  class KendoUiDropDownList extends javascript
  {
    private $outputCStr;
    private $idElementCStr;
    private $nameVarCStr;
    private $htmlTagExtraCStr;
    
    function __construct ( $idElementAStr, $nameVarAStr = null, $htmlTagExtraAStr = null )
    {
      $this->idElementCStr = $idElementAStr;
      $this->nameVarCStr = $nameVarAStr;
      $this->htmlTagExtraCStr = $htmlTagExtraAStr;
    }
    
    //---------- inicio codigo importante
    //
    //Coisas que não serão apagadas podem ser digitadas aqui dentro.
    //
    
    public function toHtmlOutput ()
    {
      self::$mainHtmlCodeCStr .= "<input id=\"{$this->idElementCStr}\" {$this->htmlTagExtraCStr}>";
      return self::$mainHtmlCodeCStr;
    }
    
    
    //---------- fim codigo importante
    
    public function toJavaScriptOutput ()
    {
      if ( !is_null ( $this->nameVarCStr ) )
      {
        self::$mainJavaScriptCodeCStr .= "var {$this->nameVarCStr} = ";
      }
      self::$mainJavaScriptCodeCStr .= "$(\"#{$this->idElementCStr}\").KendoUiDropDownList({";
      self::$mainJavaScriptCodeCStr .= $this->toObject( $this->dataCArr );
      self::$mainJavaScriptCodeCStr .= "});\r\n";
      $this->dataCArr = null;
      return self::$mainJavaScriptCodeCStr;
    }
    
    /**
     * Configures the opening and closing animations of the suggestion popup. Setting the <b><u>animation</u></b> option to <b><u>false</u></b> will disable the opening and closing animations. As a result the suggestion popup will open and close instantly.
     * @var $dataAX[ 'animation' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-animation
     * 
     * @code
       Example - disable open and close animations
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          animation: false
        });
        </script>
     * @endcode
     * @code
        Example - configure the animation
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          animation: {
           close: {
             effects: "fadeOut zoom:out",
             duration: 300
           },
           open: {
             effects: "fadeIn zoom:in",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * 
     * @var $dataAX[ 'animation' ][ 'close' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-animation.close
     * 
     * @code
       Example - configure the close animation
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          animation: {
           close: {
             effects: "zoom:out",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * @code
        Example - configure the open animation
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          animation: {
           open: {
             effects: "zoom:in",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * 
     * The animation played when the suggestion popup is opened.
     * @var $dataAX[ 'animation' ][ 'open' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-animation.open
     * 
     * @code
       Example - configure the close animation
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          animation: {
           close: {
             effects: "zoom:out",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * @code
        Example - configure the open animation
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          animation: {
           open: {
             effects: "zoom:in",
             duration: 300
           }
          }
        });
        </script>
     * @endcode
     * 
     * The effect(s) to use when playing the close animation. Multiple effects should be separated with a space.
     * <a href="/kendo-ui/api/framework/fx/common">Complete list of available animations</a>
     * @var $dataAX[ 'animation' ][ 'close' ][ 'effects' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-animation.close.effects
     * 
     * The duration of the close animation in milliseconds.
     * @var $dataAX[ 'animation' ][ 'close' ][ 'duration' ]: ( Number ) ( default: 100 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-animation.close.duration
     * 
     * The effect(s) to use when playing the open animation. Multiple effects should be separated with a space.
     * <a href="/kendo-ui/api/framework/fx/common">Complete list of available animations</a>
     * @var $dataAX[ 'animation' ][ 'open' ][ 'effects' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-animation.open.effects
     * 
     * The duration of the open animation in milliseconds.
     * @var $dataAX[ 'animation' ][ 'open' ][ 'duration' ]: ( Number ) ( default: 200 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-animation.open.duration
     * @throws string type error
     */
    public function animation ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "animation" => $dataAX );
      
      if ( is_string ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] ) )
      {
        parent::addData ( "animation.close.effects", $dataAX[ 'animation' ][ 'close' ][ 'effects' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ][ 'effects' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::animation ( \$data[ 'animation' ][ 'close' ][ 'effects' ] type must be 'String'" );
      }
      
      if ( is_numeric ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] ) )
      {
        parent::addData ( "animation.close.duration", $dataAX[ 'animation' ][ 'close' ][ 'duration' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ][ 'duration' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::animation ( \$data[ 'animation' ][ 'close' ][ 'duration' ] type must be 'Number'" );
      }
      
      if ( is_string ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] ) )
      {
        parent::addData ( "animation.open.effects", $dataAX[ 'animation' ][ 'open' ][ 'effects' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ][ 'effects' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::animation ( \$data[ 'animation' ][ 'open' ][ 'effects' ] type must be 'String'" );
      }
      
      if ( is_numeric ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] ) )
      {
        parent::addData ( "animation.open.duration", $dataAX[ 'animation' ][ 'open' ][ 'duration' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ][ 'duration' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::animation ( \$data[ 'animation' ][ 'open' ][ 'duration' ] type must be 'Number'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ][ 'close' ] ) )
      {
        parent::addData ( "animation.close", $dataAX[ 'animation' ][ 'close' ] );
        unset ( $dataAX[ 'animation' ][ 'close' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'close' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::animation ( \$data[ 'animation' ][ 'close' ] type must be 'Object'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ][ 'open' ] ) )
      {
        parent::addData ( "animation.open", $dataAX[ 'animation' ][ 'open' ] );
        unset ( $dataAX[ 'animation' ][ 'open' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ][ 'open' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::animation ( \$data[ 'animation' ][ 'open' ] type must be 'Object'" );
      }
      
      if ( is_array ( $dataAX[ 'animation' ] ) )
      {
        parent::addData ( "animation", $dataAX[ 'animation' ] );
        unset ( $dataAX[ 'animation' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'animation' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::animation ( \$data[ 'animation' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * Controls whether to bind the widget to the data source on initialization.
     * @var $dataAX[ 'autoBind' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-autoBind
     * 
     * @code
       Example
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
            autoBind: false
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function autoBind ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "autoBind" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'autoBind' ] ) )
      {
        parent::addData ( "autoBind", $dataAX[ 'autoBind' ] );
        unset ( $dataAX[ 'autoBind' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'autoBind' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::autoBind ( \$data[ 'autoBind' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Use it to set the Id of the parent DropDownList widget. <a href="/kendo-ui/web/dropdownlist/cascading">Help topic showing how cascading functionality works</a>
     * @var $dataAX[ 'cascadeFrom' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-cascadeFrom
     * 
     * @code
       Example
        <input id="parent" />
        <input id="child" />
        <script>
        $("#parent").kendoDropDownList({
            dataTextField: "parentName",
            dataValueField: "parentId",
            dataSource: [
                { parentName: "Parent1", parentId: 1 },
                { parentName: "Parent2", parentId: 2 }
            ]
        });
        
        $("#child").kendoDropDownList({
            cascadeFrom: "parent",
            dataTextField: "childName",
            dataValueField: "childId",
            dataSource: [
                { childName: "Child1", childId: 1, parentId: 1 },
                { childName: "Child2", childId: 2, parentId: 2 },
                { childName: "Child3", childId: 3, parentId: 1 },
                { childName: "Child4", childId: 4, parentId: 2 }
            ]
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function cascadeFrom ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "cascadeFrom" => $dataAX );
      
      if ( is_string ( $dataAX[ 'cascadeFrom' ] ) )
      {
        parent::addData ( "cascadeFrom", $dataAX[ 'cascadeFrom' ] );
        unset ( $dataAX[ 'cascadeFrom' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'cascadeFrom' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::cascadeFrom ( \$data[ 'cascadeFrom' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Defines the field to be used to filter the data source. If not defined the <a href="/kendo-ui/api/web/dropdownlist#configuration-dataValueField">parent's dataValueField option will be used</a>. <a href="/kendo-ui/web/dropdownlist/cascading">Help topic showing how cascading functionality works</a>
     * @var $dataAX[ 'cascadeFromField' ]: ( String )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-cascadeFromField
     * 
     * @code
       Example
        <input id="parent" />
        <input id="child" />
        <script>
        $("#parent").kendoDropDownList({
            dataTextField: "name",
            dataValueField: "id",
            dataSource: [
                { name: "Parent1", id: 1 },
                { name: "Parent2", id: 2 }
            ]
        });
        
        $("#child").kendoDropDownList({
            cascadeFrom: "parent",
            cascadeFromField: "parentId",
            dataTextField: "name",
            dataValueField: "id",
            dataSource: [
                { name: "Child1", id: 1, parentId: 1 },
                { name: "Child2", id: 2, parentId: 2 },
                { name: "Child3", id: 3, parentId: 1 },
                { name: "Child4", id: 4, parentId: 2 }
            ]
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function cascadeFromField ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "cascadeFromField" => $dataAX );
      
      if ( is_string ( $dataAX[ 'cascadeFromField' ] ) )
      {
        parent::addData ( "cascadeFromField", $dataAX[ 'cascadeFromField' ] );
        unset ( $dataAX[ 'cascadeFromField' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'cascadeFromField' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::cascadeFromField ( \$data[ 'cascadeFromField' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The data source of the widget which is used to display a list of values. Can be a JavaScript object which represents a valid data source configuration, a JavaScript array or an existing <a href="/kendo-ui/api/framework/datasource">kendo.data.DataSource</a> instance.
     * If the <b><u>dataSource</u></b> option is set to a JavaScript object or array the widget will initialize a new <a href="/kendo-ui/api/framework/datasource">kendo.data.DataSource</a> instance using that value as data source configuration.
     * If the <b><u>dataSource</u></b> option is an existing <a href="/kendo-ui/api/framework/datasource">kendo.data.DataSource</a> instance the widget will use that instance and will <strong>not</strong> initialize a new one.
     * @var $dataAX[ 'dataSource' ]: ( Object | Array | kendo.data.DataSource )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-dataSource
     * 
     * @code
       Example - set dataSource as a JavaScript object
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          dataSource: {
            data: ["One", "Two"]
          }
        });
        </script>
     * @endcode
     * @code
        Example - set dataSource as a JavaScript array
        <input id="dropdownlist" />
        <script>
        var data = ["One", "Two"];
        $("#dropdownlist").kendoDropDownList({
          dataSource: data
        });
        </script>
     * @endcode
     * @code
        Example - set dataSource as an existing kendo.data.DataSource instance
        <input id="dropdownlist" />
        <script>
        var dataSource = new kendo.data.DataSource({
          transport: {
            read: {
              url: "http://demos.telerik.com/kendo-ui/service/products",
              dataType: "jsonp"
            }
          }
        });
        $("#dropdownlist").kendoDropDownList({
          dataSource: dataSource,
          dataTextField: "ProductName",
          dataValueField: "ProductID"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function dataSource ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dataSource" => $dataAX );
      
      if ( is_array ( $dataAX[ 'dataSource' ] ) )
      {
        parent::addData ( "dataSource", $dataAX[ 'dataSource' ] );
        unset ( $dataAX[ 'dataSource' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dataSource' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::dataSource ( \$data[ 'dataSource' ] type must be 'Object' | 'Array' | 'kendo.data.DataSource'" );
      }
      
    }
    
    
    /**
     * The field of the data item that provides the text content of the list items. The widget will filter the data source based on this field.
     * <strong>Important</strong> When <code>dataTextField</code> is defined, the<code>dataValueField</code> option also should be set.
     * 
     * ( ! ) <strong>Important</strong> When <b><u>dataTextField</u></b> is defined, the<b><u>dataValueField</u></b> option also should be set.
     * @var $dataAX[ 'dataTextField' ]: ( String ) ( default: "" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-dataTextField
     * 
     * @code
       Example - set the dataTextField
        <input id="dropdownlist" />
        <script>
          $("#dropdownlist").kendoDropDownList({
            dataSource: [
              { Name: "Parent1", Id: 1 },
              { Name: "Parent2", Id: 2 }
            ],
            dataTextField: "Name",
            dataValueField: "Id"
          });
        </script>
     * @endcode
     * @throws string type error
     */
    public function dataTextField ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dataTextField" => $dataAX );
      
      if ( is_string ( $dataAX[ 'dataTextField' ] ) )
      {
        parent::addData ( "dataTextField", $dataAX[ 'dataTextField' ] );
        unset ( $dataAX[ 'dataTextField' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dataTextField' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::dataTextField ( \$data[ 'dataTextField' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The field of the data item that provides the value of the widget.
     * <strong>Important</strong> When <code>dataValueField</code> is defined, the<code>dataTextField</code> option also should be set.
     * 
     * ( ! ) <strong>Important</strong> When <b><u>dataValueField</u></b> is defined, the<b><u>dataTextField</u></b> option also should be set.
     * @var $dataAX[ 'dataValueField' ]: ( String ) ( default: "" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-dataValueField
     * 
     * @code
       Example - set the dataValueField
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
            dataSource: [{
                { Name: "Parent1", Id: 1 },
                { Name: "Parent2", Id: 2 }
            }]
            dataTextField: "Name",
            dataValueField: "Id"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function dataValueField ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "dataValueField" => $dataAX );
      
      if ( is_string ( $dataAX[ 'dataValueField' ] ) )
      {
        parent::addData ( "dataValueField", $dataAX[ 'dataValueField' ] );
        unset ( $dataAX[ 'dataValueField' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'dataValueField' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::dataValueField ( \$data[ 'dataValueField' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the delay in milliseconds before the search-text typed by the end user is cleared.
     * @var $dataAX[ 'delay' ]: ( Number ) ( default: 500 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-delay
     * 
     * @code
       Example - set the delay
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
            delay: 1000 // wait 1 second before clearing the user input
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function delay ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "delay" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'delay' ] ) )
      {
        parent::addData ( "delay", $dataAX[ 'delay' ] );
        unset ( $dataAX[ 'delay' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'delay' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::delay ( \$data[ 'delay' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * If set to <b><u>false</u></b> the widget will be disabled and will not allow user input. The widget is enabled by default and allows user input.
     * @var $dataAX[ 'enable' ]: ( Boolean ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-enable
     * 
     * @code
       Example - disable the widget
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          enable: false
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function enable ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "enable" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'enable' ] ) )
      {
        parent::addData ( "enable", $dataAX[ 'enable' ] );
        unset ( $dataAX[ 'enable' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'enable' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::enable ( \$data[ 'enable' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * The filtering method used to determine the suggestions for the current value. Filtration is turned off by default. The supported filter values are <b><u>startswith</u></b>, <b><u>endswith</u></b> and <b><u>contains</u></b>.
     * @var $dataAX[ 'filter' ]: ( String ) ( default: "none" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-filter
     * 
     * @code
       Example - set the filter
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          dataSource: ["Chai", "Chang", "Tofu"],
          filter: "contains"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function filter ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "filter" => $dataAX );
      
      if ( is_string ( $dataAX[ 'filter' ] ) )
      {
        parent::addData ( "filter", $dataAX[ 'filter' ] );
        unset ( $dataAX[ 'filter' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'filter' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::filter ( \$data[ 'filter' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> used to render the fixed header group. By default the widget displays only the value of the current group.
     * @var $dataAX[ 'fixedGroupTemplate' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-fixedGroupTemplate
     * 
     * @code
       
        <input id="customers" style="width: 400px" />
        <script>
            $(document).ready(function() {
                $("#customers").kendoDropDownList({
                    dataTextField: "ContactName",
                    dataValueField: "CustomerID",
                    fixedGroupTemplate: "Fixed group: #: data #",
                    height: 400,
                    dataSource: {
                        type: "odata",
                        transport: {
                            read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Customers"
                        },
                        group: { field: "Country" }
                    }
                });
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function fixedGroupTemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "fixedGroupTemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'fixedGroupTemplate' ] ) )
      {
        parent::addData ( "fixedGroupTemplate", $dataAX[ 'fixedGroupTemplate' ] );
        unset ( $dataAX[ 'fixedGroupTemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'fixedGroupTemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::fixedGroupTemplate ( \$data[ 'fixedGroupTemplate' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> used to render the groups. By default the widget displays only the value of the group.
     * @var $dataAX[ 'groupTemplate' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-groupTemplate
     * 
     * @code
       
        <input id="customers" style="width: 400px" />
        <script>
            $(document).ready(function() {
                $("#customers").kendoDropDownList({
                    dataTextField: "ContactName",
                    dataValueField: "CustomerID",
                    groupTemplate: "Group: #: data #",
                    height: 400,
                    dataSource: {
                        type: "odata",
                        transport: {
                            read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Customers"
                        },
                        group: { field: "Country" }
                    }
                });
            });
        </script>
     * @endcode
     * @throws string type error
     */
    public function groupTemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "groupTemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'groupTemplate' ] ) )
      {
        parent::addData ( "groupTemplate", $dataAX[ 'groupTemplate' ] );
        unset ( $dataAX[ 'groupTemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'groupTemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::groupTemplate ( \$data[ 'groupTemplate' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
    /**
     * The height of the suggestion popup in pixels. The default value is 200 pixels.
     * @var $dataAX[ 'height' ]: ( Number ) ( default: 200 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-height
     * 
     * @code
       Example - set the height
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          height: 500
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function height ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "height" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'height' ] ) )
      {
        parent::addData ( "height", $dataAX[ 'height' ] );
        unset ( $dataAX[ 'height' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'height' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::height ( \$data[ 'height' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * If set to <b><u>false</u></b> case-sensitive search will be performed to find suggestions. The widget performs case-insensitive searching by default.
     * @var $dataAX[ 'ignoreCase' ]: ( String ) ( default: true )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-ignoreCase
     * 
     * @code
       Example - disable case-insensitive suggestions
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          ignoreCase: false
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function ignoreCase ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "ignoreCase" => $dataAX );
      
      if ( is_string ( $dataAX[ 'ignoreCase' ] ) )
      {
        parent::addData ( "ignoreCase", $dataAX[ 'ignoreCase' ] );
        unset ( $dataAX[ 'ignoreCase' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'ignoreCase' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::ignoreCase ( \$data[ 'ignoreCase' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The index of the initially selected item. The index is <b><u>0</u></b> based.
     * @var $dataAX[ 'index' ]: ( Number ) ( default: 0 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-index
     * 
     * @code
       Example - select second item
        <input id="dropdownlist" />
        <script>
        var items = [{ text: "Item 1", value: "1" }, { text: "Item 2", value: "2" }];
        $("#dropdownlist").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            dataSource: items,
            index: 1
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function index ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "index" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'index' ] ) )
      {
        parent::addData ( "index", $dataAX[ 'index' ] );
        unset ( $dataAX[ 'index' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'index' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::index ( \$data[ 'index' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * The minimum number of characters the user must type before a filter is performed. Set to higher value than <b><u>1</u></b> if the search could match a lot of items.
     * Widget will initiate a request when input value is cleared. If you would like to prevent this behavior please check the <a href="#events-filtering">filtering</a> event for more details.
     * 
     * ( ! ) Widget will initiate a request when input value is cleared. If you would like to prevent this behavior please check the <a href="#events-filtering">filtering</a> event for more details.
     * @var $dataAX[ 'minLength' ]: ( Number ) ( default: 1 )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-minLength
     * 
     * @code
       Example - set minLength
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          dataSource: ["Chai", "Chang", "Tofu"],
          filter: "contains",
          minLength: 3
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function minLength ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "minLength" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'minLength' ] ) )
      {
        parent::addData ( "minLength", $dataAX[ 'minLength' ] );
        unset ( $dataAX[ 'minLength' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'minLength' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::minLength ( \$data[ 'minLength' ] type must be 'Number'" );
      }
      
    }
    
    
    /**
     * The options that will be used for the popup initialization. For more details about the available options refer to <a href="/kendo-ui/api/javascript/ui/popup">Popup</a> documentation.
     * @var $dataAX[ 'popup' ]: ( Object )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-popup
     * 
     * @code
       Example - append the popup to a specific element
        <div id="container">
            <input id="dropdownlist" />
        </div>
        <script>
        $("#dropdownlist").kendoDropDownList({
          dataSource: [
            { id: 1, name: "Apples" },
            { id: 2, name: "Oranges" }
          ],
          dataTextField: "name",
          dataValueField: "id",
          popup: {
            appendTo: $("#container")
          }
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function popup ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "popup" => $dataAX );
      
      if ( is_array ( $dataAX[ 'popup' ] ) )
      {
        parent::addData ( "popup", $dataAX[ 'popup' ] );
        unset ( $dataAX[ 'popup' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'popup' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::popup ( \$data[ 'popup' ] type must be 'Object'" );
      }
      
    }
    
    
    /**
     * Define the text of the default empty item. If the value is an object, then the widget will use it as a valid data item. Note that the optionLabel will not be available if the widget is empty.
     * <strong>Important:</strong> Since Q1 2015 (2015.1.318), the option label is rendered as a separate header template. The benefits of this change are:
     * <strong>Important:</strong> If <b><u>optionLabel</u></b> is an object, it needs to have at least <b><u>dataValueField</u></b> and <b><u>dataTextField</u></b> properties. Otherwise, widget will show <b><u>undefined</u></b>.
     * <strong>Important:</strong> [Not relevant after Q1 2015] Widget's value will be equal to the <b><u>optionLabel</u></b> if the <b><u>dataValueField</u></b> and <b><u>dataTextField</u></b> options are equal or not defined
     * 
     * ( ! ) <strong>Important:</strong> Since Q1 2015 (2015.1.318), the option label is rendered as a separate header template. The benefits of this change are:
     * @var $dataAX[ 'optionLabel' ]: ( String | Object ) ( default: "" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-optionLabel
     * 
     * @code
       Example - specify optionLabel as a string
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
            dataSource: ["Apples", "Oranges"],
            optionLabel: "Select a fruit..."
        });
        </script>
     * @endcode
     * @code
        Example - specify optionLabel as an object
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
            dataSource: [
                { productName: "Product 1", productId: 1 },
                { productName: "Product 2", productId: 2 }
            ],
            dataTextField: "productName",
            dataValueField: "productId",
            optionLabel: {
                productName: "Select a product...",
                productId: ""
            }
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function optionLabel ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "optionLabel" => $dataAX );
      
      if ( is_string ( $dataAX[ 'optionLabel' ] ) )
      {
        parent::addData ( "optionLabel", $dataAX[ 'optionLabel' ] );
        unset ( $dataAX[ 'optionLabel' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_array ( $dataAX[ 'optionLabel' ] ) )
      {
        parent::addData ( "optionLabel", $dataAX[ 'optionLabel' ] );
        unset ( $dataAX[ 'optionLabel' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'optionLabel' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::optionLabel ( \$data[ 'optionLabel' ] type must be 'String' | 'Object'" );
      }
      
    }
    
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> used to render the option label.
     * @var $dataAX[ 'optionLabelTemplate' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-optionLabelTemplate
     * @throws string type error
     */
    public function optionLabelTemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "optionLabelTemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'optionLabelTemplate' ] ) )
      {
        parent::addData ( "optionLabelTemplate", $dataAX[ 'optionLabelTemplate' ] );
        unset ( $dataAX[ 'optionLabelTemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'optionLabelTemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::optionLabelTemplate ( \$data[ 'optionLabelTemplate' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
    /**
     * Specifies a static HTML content, which will be rendered as a header of the popup element.
     * <strong>Important</strong> Widget does not pass a model data to the header template. Use this option only with static HTML.
     * 
     * ( ! ) <strong>Important</strong> Widget does not pass a model data to the header template. Use this option only with static HTML.
     * @var $dataAX[ 'headerTemplate' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-headerTemplate
     * 
     * @code
       Example - specify headerTemplate as a string
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          dataSource: [
            { id: 1, name: "Apples" },
            { id: 2, name: "Oranges" }
          ],
          dataTextField: "name",
          dataValueField: "id",
          headerTemplate: '<div><h2>Fruits</h2></div>'
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function headerTemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "headerTemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'headerTemplate' ] ) )
      {
        parent::addData ( "headerTemplate", $dataAX[ 'headerTemplate' ] );
        unset ( $dataAX[ 'headerTemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'headerTemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::headerTemplate ( \$data[ 'headerTemplate' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">template</a> used to render the items. By default the widget displays only the text of the data item (configured via <b><u>dataTextField</u></b>).
     * @var $dataAX[ 'template' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-template
     * 
     * @code
       Example - specify template as a function
        <input id="dropdownlist" />
        <script id="template" type="text/x-kendo-template">
          <span>
            <img src="/img/#: id #.png" alt="#: name #" />
            #: name #
          </span>
        </script>
        <script>
        $("#dropdownlist").kendoDropDownList({
          dataSource: [
            { id: 1, name: "Apples" },
            { id: 2, name: "Oranges" }
          ],
          dataTextField: "name",
          dataValueField: "id",
          template: kendo.template($("#template").html())
        });
        </script>
     * @endcode
     * @code
        Example - specify template as a string
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          dataSource: [
            { id: 1, name: "Apples" },
            { id: 2, name: "Oranges" }
          ],
          dataTextField: "name",
          dataValueField: "id",
          template: '<span><img src="/img/#: id #.png" alt="#: name #" />#: name #</span>'
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function template ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "template" => $dataAX );
      
      if ( is_string ( $dataAX[ 'template' ] ) )
      {
        parent::addData ( "template", $dataAX[ 'template' ] );
        unset ( $dataAX[ 'template' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'template' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::template ( \$data[ 'template' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
    /**
     * The <a href="/kendo-ui/api/framework/kendo#methods-template">valueTemplate</a> used to render the selected value. By default the widget displays only the text of the data item (configured via <b><u>dataTextField</u></b>).
     * @var $dataAX[ 'valueTemplate' ]: ( String | Function )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-valueTemplate
     * 
     * @code
       Example - specify valueTemplate as a function
        <input id="dropdownlist" />
        <script id="valueTemplate" type="text/x-kendo-template">
            <img src="/img/#: id #.png" alt="#: name #" />
            #: name #
        </script>
        <script>
        $("#dropdownlist").kendoDropDownList({
          dataSource: [
            { id: 1, name: "Apples" },
            { id: 2, name: "Oranges" }
          ],
          dataTextField: "name",
          dataValueField: "id",
          valueTemplate: kendo.template($("#valueTemplate").html())
        });
        </script>
     * @endcode
     * @code
        Example - specify template as a string
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
          dataSource: [
            { id: 1, name: "Apples" },
            { id: 2, name: "Oranges" }
          ],
          dataTextField: "name",
          dataValueField: "id",
          valueTemplate: '<img src="/img/#: id #.png" alt="#: name #" />#: name #'
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function valueTemplate ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "valueTemplate" => $dataAX );
      
      if ( is_string ( $dataAX[ 'valueTemplate' ] ) )
      {
        parent::addData ( "valueTemplate", $dataAX[ 'valueTemplate' ] );
        unset ( $dataAX[ 'valueTemplate' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'valueTemplate' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::valueTemplate ( \$data[ 'valueTemplate' ] type must be 'String' | 'Function'" );
      }
      
    }
    
    
    /**
     * The text of the widget used when the <b><u>autoBind</u></b> is set to <b><u>false</u></b>.
     * @var $dataAX[ 'text' ]: ( String ) ( default: "" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-text
     * 
     * @code
       Example - specify text of the widget
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
             autoBind: false,
             text: "Chai"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function text ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "text" => $dataAX );
      
      if ( is_string ( $dataAX[ 'text' ] ) )
      {
        parent::addData ( "text", $dataAX[ 'text' ] );
        unset ( $dataAX[ 'text' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'text' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::text ( \$data[ 'text' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * The value of the widget.
     * @var $dataAX[ 'value' ]: ( String ) ( default: "" )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-value
     * 
     * @code
       Example - specify value of the widget
        <input id="dropdownlist" />
        <script>
        $("#dropdownlist").kendoDropDownList({
             dataSource: ["Item1", "Item2"],
             value: "Item1"
        });
        </script>
     * @endcode
     * @throws string type error
     */
    public function value ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "value" => $dataAX );
      
      if ( is_string ( $dataAX[ 'value' ] ) )
      {
        parent::addData ( "value", $dataAX[ 'value' ] );
        unset ( $dataAX[ 'value' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'value' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::value ( \$data[ 'value' ] type must be 'String'" );
      }
      
    }
    
    
    /**
     * Specifies the <a href="/kendo-ui/framework/mvvm/bindings/value">value binding</a> behavior for the widget when the initial model value is null. If set to true, the View-Model field will be updated with the selected item value field. If set to false, the View-Model field will be updated with the selected item.
     * @var $dataAX[ 'valuePrimitive' ]: ( Boolean ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-valuePrimitive
     * 
     * @code
       Example - specify that the View-Model field should be updated with the selected item value
        <select id="dropdown" data-bind="value: selectedProductId, source: products" >
        </select>
        
        <script>
        $("#dropdown").kendoDropDownList({
          valuePrimitive: true,
          dataTextField: "name",
          dataValueField: "id",
          optionLabel: "Select product..."
        });
        var viewModel = kendo.observable({
          selectedProductId: null,
          products: [
            { id: 1, name: "Coffee" },
            { id: 2, name: "Tea" },
            { id: 3, name: "Juice" }
          ]
        });
        
        kendo.bind($("#dropdown"), viewModel);
        </script>
     * @endcode
     * @throws string type error
     */
    public function valuePrimitive ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "valuePrimitive" => $dataAX );
      
      if ( is_bool ( $dataAX[ 'valuePrimitive' ] ) )
      {
        parent::addData ( "valuePrimitive", $dataAX[ 'valuePrimitive' ] );
        unset ( $dataAX[ 'valuePrimitive' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'valuePrimitive' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::valuePrimitive ( \$data[ 'valuePrimitive' ] type must be 'Boolean'" );
      }
      
    }
    
    
    /**
     * Enables the virtualization feature of the widget.
     * @var $dataAX[ 'virtual' ]: ( Boolean | Object ) ( default: false )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-virtual
     * 
     * @code
       
        <input id="orders" style="width: 400px" />
        <script>
            $(document).ready(function() {
                $("#orders").kendoDropDownList({
                    template: '<span class="order-id">#= OrderID #</span> #= ShipName #, #= ShipCountry #',
                    dataTextField: "ShipName",
                    dataValueField: "OrderID",
                    filter: "contains",
                    virtual: true,
                    height: 520,
                    dataSource: {
                        type: "odata",
                        transport: {
                            read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Orders"
                        },
                        pageSize: 80,
                        serverPaging: true,
                        serverFiltering: true
                    }
                });
            });
        </script>
     * @endcode
     * 
     * Specifies the height of the virtual item. All items in the virtualized list <strong>must</strong> have the same height. If the developer does not specify one, the framework will automatically set <b><u>itemHeight</u></b> based on the current theme and font size.
     * @var $dataAX[ 'virtual' ][ 'itemHeight' ]: ( Number ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-virtual.itemHeight
     * 
     * @code
       
        <input id="orders" style="width: 400px" />
        <script>
            $(document).ready(function() {
                $("#orders").kendoDropDownList({
                    template: '<span class="order-id">#= OrderID #</span> #= ShipName #, #= ShipCountry #',
                    dataTextField: "ShipName",
                    dataValueField: "OrderID",
                    filter: "contains",
                    virtual: {
                        itemHeight: 26,
                        valueMapper: function(options) {
                            $.ajax({
                                url: "http://demos.telerik.com/kendo-ui/service/Orders/ValueMapper",
                                type: "GET",
                                data: convertValues(options.value),
                                success: function (data) {
                                    options.success(data);
                                }
                            })
                        }
                    },
                    height: 520,
                    dataSource: {
                        type: "odata",
                        transport: {
                            read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Orders"
                        },
                        schema: {
                            model: {
                                fields: {
                                    OrderID: { type: "number" },
                                    Freight: { type: "number" },
                                    ShipName: { type: "string" },
                                    OrderDate: { type: "date" },
                                    ShipCity: { type: "string" }
                                }
                            }
                        },
                        pageSize: 80,
                        serverPaging: true,
                        serverFiltering: true
                    }
                });
            });
        
            function convertValues(value) {
                var data = {};
        
                value = $.isArray(value) ? value : [value];
        
                for (var idx = 0; idx < value.length; idx++) {
                    data["values[" + idx + "]"] = value[idx];
                }
        
                return data;
            }
        </script>
     * @endcode
     * @code
        
        <input id="orders" style="width: 400px" />
        <script>
            $(document).ready(function() {
                $("#orders").kendoDropDownList({
                    template: '<span class="order-id">#= OrderID #</span> #= ShipName #, #= ShipCountry #',
                    dataTextField: "ShipName",
                    dataValueField: "OrderID",
                    filter: "contains",
                    virtual: {
                        itemHeight: 26,
                        valueMapper: function(options) {
                            $.ajax({
                                url: "http://demos.telerik.com/kendo-ui/service/Orders/ValueMapper",
                                type: "GET",
                                data: convertValues(options.value),
                                success: function (data) {
                                    //the **data** is either index or array of indices.
                                    //Example:
                                    // 10258 -> 10 (index in the Orders collection)
                                    // [10258, 10261] -> [10, 14] (indices in the Orders collection)
        
                                    options.success(data);
                                }
                            })
                        }
                    },
                    height: 520,
                    dataSource: {
                        type: "odata",
                        transport: {
                            read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Orders"
                        },
                        schema: {
                            model: {
                                fields: {
                                    OrderID: { type: "number" },
                                    Freight: { type: "number" },
                                    ShipName: { type: "string" },
                                    OrderDate: { type: "date" },
                                    ShipCity: { type: "string" }
                                }
                            }
                        },
                        pageSize: 80,
                        serverPaging: true,
                        serverFiltering: true
                    }
                });
            });
        
            function convertValues(value) {
                var data = {};
        
                value = $.isArray(value) ? value : [value];
        
                for (var idx = 0; idx < value.length; idx++) {
                    data["values[" + idx + "]"] = value[idx];
                }
        
                return data;
            }
        </script>
     * @endcode
     * 
     * The <b><u>valueMapper</u></b> function is <strong>mandatory</strong> for the functionality of the virtualized widget. The widget calls the <b><u>valueMapper</u></b> function when the widget receives a value, that is not fetched from the remote server yet. The widget will pass the selected value(s) in the <b><u>valueMapper</u></b> function. In turn, the valueMapper implementation should return the <strong>respective data item(s) index/indices</strong>.
     * @var $dataAX[ 'virtual' ][ 'valueMapper' ]: ( Function ) ( default: null )
     * @see http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-virtual.valueMapper
     * 
     * @code
       
        <input id="orders" style="width: 400px" />
        <script>
            $(document).ready(function() {
                $("#orders").kendoDropDownList({
                    template: '<span class="order-id">#= OrderID #</span> #= ShipName #, #= ShipCountry #',
                    dataTextField: "ShipName",
                    dataValueField: "OrderID",
                    filter: "contains",
                    virtual: {
                        itemHeight: 26,
                        valueMapper: function(options) {
                            $.ajax({
                                url: "http://demos.telerik.com/kendo-ui/service/Orders/ValueMapper",
                                type: "GET",
                                data: convertValues(options.value),
                                success: function (data) {
                                    options.success(data);
                                }
                            })
                        }
                    },
                    height: 520,
                    dataSource: {
                        type: "odata",
                        transport: {
                            read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Orders"
                        },
                        schema: {
                            model: {
                                fields: {
                                    OrderID: { type: "number" },
                                    Freight: { type: "number" },
                                    ShipName: { type: "string" },
                                    OrderDate: { type: "date" },
                                    ShipCity: { type: "string" }
                                }
                            }
                        },
                        pageSize: 80,
                        serverPaging: true,
                        serverFiltering: true
                    }
                });
            });
        
            function convertValues(value) {
                var data = {};
        
                value = $.isArray(value) ? value : [value];
        
                for (var idx = 0; idx < value.length; idx++) {
                    data["values[" + idx + "]"] = value[idx];
                }
        
                return data;
            }
        </script>
     * @endcode
     * @code
        
        <input id="orders" style="width: 400px" />
        <script>
            $(document).ready(function() {
                $("#orders").kendoDropDownList({
                    template: '<span class="order-id">#= OrderID #</span> #= ShipName #, #= ShipCountry #',
                    dataTextField: "ShipName",
                    dataValueField: "OrderID",
                    filter: "contains",
                    virtual: {
                        itemHeight: 26,
                        valueMapper: function(options) {
                            $.ajax({
                                url: "http://demos.telerik.com/kendo-ui/service/Orders/ValueMapper",
                                type: "GET",
                                data: convertValues(options.value),
                                success: function (data) {
                                    //the **data** is either index or array of indices.
                                    //Example:
                                    // 10258 -> 10 (index in the Orders collection)
                                    // [10258, 10261] -> [10, 14] (indices in the Orders collection)
        
                                    options.success(data);
                                }
                            })
                        }
                    },
                    height: 520,
                    dataSource: {
                        type: "odata",
                        transport: {
                            read: "http://demos.telerik.com/kendo-ui/service/Northwind.svc/Orders"
                        },
                        schema: {
                            model: {
                                fields: {
                                    OrderID: { type: "number" },
                                    Freight: { type: "number" },
                                    ShipName: { type: "string" },
                                    OrderDate: { type: "date" },
                                    ShipCity: { type: "string" }
                                }
                            }
                        },
                        pageSize: 80,
                        serverPaging: true,
                        serverFiltering: true
                    }
                });
            });
        
            function convertValues(value) {
                var data = {};
        
                value = $.isArray(value) ? value : [value];
        
                for (var idx = 0; idx < value.length; idx++) {
                    data["values[" + idx + "]"] = value[idx];
                }
        
                return data;
            }
        </script>
     * @endcode
     * @throws string type error
     */
    public function virtual ( $dataAX )
    {
      if ( !is_string ( $this->outputCStr ) )
      {
        $this->outputCStr = '';
      }
      
      $dataAX = array ( "virtual" => $dataAX );
      
      if ( is_numeric ( $dataAX[ 'virtual' ][ 'itemHeight' ] ) )
      {
        parent::addData ( "virtual.itemHeight", $dataAX[ 'virtual' ][ 'itemHeight' ] );
        unset ( $dataAX[ 'virtual' ][ 'itemHeight' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'virtual' ][ 'itemHeight' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::virtual ( \$data[ 'virtual' ][ 'itemHeight' ] type must be 'Number'" );
      }
      
      if ( is_string ( $dataAX[ 'virtual' ][ 'valueMapper' ] ) )
      {
        parent::addData ( "virtual.valueMapper", $dataAX[ 'virtual' ][ 'valueMapper' ] );
        unset ( $dataAX[ 'virtual' ][ 'valueMapper' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'virtual' ][ 'valueMapper' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::virtual ( \$data[ 'virtual' ][ 'valueMapper' ] type must be 'Function'" );
      }
      
      if ( is_bool ( $dataAX[ 'virtual' ] ) )
      {
        parent::addData ( "virtual", $dataAX[ 'virtual' ] );
        unset ( $dataAX[ 'virtual' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( is_array ( $dataAX[ 'virtual' ] ) )
      {
        parent::addData ( "virtual", $dataAX[ 'virtual' ] );
        unset ( $dataAX[ 'virtual' ] );
        parent::garbageCollector ( $dataAX );
      }
      else if ( isset ( $dataAX[ 'virtual' ] ) )
      {
        throw new Exception ( "Type error - KendoUiDropDownList::virtual ( \$data[ 'virtual' ] type must be 'Boolean' | 'Object'" );
      }
      
    }
    
    
  }